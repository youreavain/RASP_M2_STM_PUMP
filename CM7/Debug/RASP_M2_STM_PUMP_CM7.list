
RASP_M2_STM_PUMP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ccc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800817c  0800817c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008184  08008184  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800818c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020a8  24000060  080081ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002108  080081ec  00022108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011496  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229e  00000000  00000000  00031567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00033808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000930  00000000  00000000  000343f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000395d4  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f74  00000000  00000000  0006e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017b47b  00000000  00000000  00080270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035e4  00000000  00000000  001fb6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007f54 	.word	0x08007f54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08007f54 	.word	0x08007f54

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <SystemInit+0x104>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3e      	ldr	r2, [pc, #248]	; (8000790 <SystemInit+0x104>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <SystemInit+0x104>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a3a      	ldr	r2, [pc, #232]	; (8000790 <SystemInit+0x104>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <SystemInit+0x108>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a34      	ldr	r2, [pc, #208]	; (8000794 <SystemInit+0x108>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <SystemInit+0x10c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <SystemInit+0x10c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <SystemInit+0x10c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <SystemInit+0x10c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492e      	ldr	r1, [pc, #184]	; (8000798 <SystemInit+0x10c>)
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <SystemInit+0x110>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemInit+0x108>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <SystemInit+0x108>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemInit+0x10c>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <SystemInit+0x114>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemInit+0x10c>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x118>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x10c>)
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x11c>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x10c>)
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <SystemInit+0x11c>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x10c>)
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <SystemInit+0x11c>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <SystemInit+0x10c>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x10c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <SystemInit+0x10c>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x10c>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <SystemInit+0x120>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <SystemInit+0x120>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x124>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x128>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x12c>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x130>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SystemInit+0x104>)
 8000780:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000784:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <send_AT_command>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


	void send_AT_command(UART_HandleTypeDef *huart, const char *command) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
		  HAL_UART_Transmit(huart, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80007ca:	6838      	ldr	r0, [r7, #0]
 80007cc:	f7ff fd88 	bl	80002e0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f004 fbe4 	bl	8004fa8 <HAL_UART_Transmit>
		  HAL_Delay(3000);
 80007e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007e4:	f000 ff60 	bl	80016a8 <HAL_Delay>
	}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <processFlag>:

	void processFlag(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b090      	sub	sp, #64	; 0x40
 80007f4:	af00      	add	r7, sp, #0
		switch(state) {
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <processFlag+0xa4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b08      	cmp	r3, #8
 80007fc:	d844      	bhi.n	8000888 <processFlag+0x98>
 80007fe:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <processFlag+0x14>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000829 	.word	0x08000829
 8000808:	08000833 	.word	0x08000833
 800080c:	0800083d 	.word	0x0800083d
 8000810:	08000847 	.word	0x08000847
 8000814:	0800085f 	.word	0x0800085f
 8000818:	08000869 	.word	0x08000869
 800081c:	08000873 	.word	0x08000873
 8000820:	08000889 	.word	0x08000889
 8000824:	0800087f 	.word	0x0800087f
			case STATE_INIT:
				send_AT_command(&huart4, "AT\r\n");
 8000828:	491b      	ldr	r1, [pc, #108]	; (8000898 <processFlag+0xa8>)
 800082a:	481c      	ldr	r0, [pc, #112]	; (800089c <processFlag+0xac>)
 800082c:	f7ff ffc8 	bl	80007c0 <send_AT_command>
				break;
 8000830:	e02b      	b.n	800088a <processFlag+0x9a>
			case STATE_CONF_CONTTYPE:
				send_AT_command(&huart4, "AT+QHTTPCFG=\"contenttype\",4\r\n");
 8000832:	491b      	ldr	r1, [pc, #108]	; (80008a0 <processFlag+0xb0>)
 8000834:	4819      	ldr	r0, [pc, #100]	; (800089c <processFlag+0xac>)
 8000836:	f7ff ffc3 	bl	80007c0 <send_AT_command>
				break;
 800083a:	e026      	b.n	800088a <processFlag+0x9a>
			case STATE_NETWORK_INFO:
				send_AT_command(&huart4, "AT+QENG=\"servingcell\"\r\n");
 800083c:	4919      	ldr	r1, [pc, #100]	; (80008a4 <processFlag+0xb4>)
 800083e:	4817      	ldr	r0, [pc, #92]	; (800089c <processFlag+0xac>)
 8000840:	f7ff ffbe 	bl	80007c0 <send_AT_command>
				break;
 8000844:	e021      	b.n	800088a <processFlag+0x9a>
			case STATE_URL_INFO: {
				char http_url_command[64];
				sprintf(http_url_command, "AT+QHTTPURL=%d,5\r\n", HTTP_URL_LEN);
 8000846:	463b      	mov	r3, r7
 8000848:	222e      	movs	r2, #46	; 0x2e
 800084a:	4917      	ldr	r1, [pc, #92]	; (80008a8 <processFlag+0xb8>)
 800084c:	4618      	mov	r0, r3
 800084e:	f006 fec7 	bl	80075e0 <siprintf>
				send_AT_command(&huart4, http_url_command);
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <processFlag+0xac>)
 8000858:	f7ff ffb2 	bl	80007c0 <send_AT_command>
				break;
 800085c:	e015      	b.n	800088a <processFlag+0x9a>
			}
			case STATE_SEND_URL:
				send_AT_command(&huart4, HTTP_URL);
 800085e:	4913      	ldr	r1, [pc, #76]	; (80008ac <processFlag+0xbc>)
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <processFlag+0xac>)
 8000862:	f7ff ffad 	bl	80007c0 <send_AT_command>
				break;
 8000866:	e010      	b.n	800088a <processFlag+0x9a>
			case STATE_GET_HTTP:
				send_AT_command(&huart4, "AT+QHTTPGET=5\r\n");
 8000868:	4911      	ldr	r1, [pc, #68]	; (80008b0 <processFlag+0xc0>)
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <processFlag+0xac>)
 800086c:	f7ff ffa8 	bl	80007c0 <send_AT_command>
				break;
 8000870:	e00b      	b.n	800088a <processFlag+0x9a>
			case STATE_PROCESS_DATA:
				HAL_UARTEx_ReceiveToIdle_IT(&huart1, PUMP_BUFF, PUMP_BUFF_SIZE);
 8000872:	22fa      	movs	r2, #250	; 0xfa
 8000874:	490f      	ldr	r1, [pc, #60]	; (80008b4 <processFlag+0xc4>)
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <processFlag+0xc8>)
 8000878:	f006 fe07 	bl	800748a <HAL_UARTEx_ReceiveToIdle_IT>
				break;
 800087c:	e005      	b.n	800088a <processFlag+0x9a>
			case STATE_READ:
				send_AT_command(&huart4, "AT+QHTTPREAD=120\r\n");
 800087e:	490f      	ldr	r1, [pc, #60]	; (80008bc <processFlag+0xcc>)
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <processFlag+0xac>)
 8000882:	f7ff ff9d 	bl	80007c0 <send_AT_command>
				break;
 8000886:	e000      	b.n	800088a <processFlag+0x9a>
			default: //if there is no case match, optional
				break;
 8000888:	bf00      	nop
		}
	}
 800088a:	bf00      	nop
 800088c:	3740      	adds	r7, #64	; 0x40
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24001fb6 	.word	0x24001fb6
 8000898:	08007f6c 	.word	0x08007f6c
 800089c:	2400007c 	.word	0x2400007c
 80008a0:	08007f74 	.word	0x08007f74
 80008a4:	08007f94 	.word	0x08007f94
 80008a8:	08007fac 	.word	0x08007fac
 80008ac:	08007fc0 	.word	0x08007fc0
 80008b0:	08007ff0 	.word	0x08007ff0
 80008b4:	24001d84 	.word	0x24001d84
 80008b8:	2400010c 	.word	0x2400010c
 80008bc:	08008000 	.word	0x08008000

080008c0 <processPumpData>:

	void processPumpData(void) {
 80008c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	466b      	mov	r3, sp
 80008ca:	4698      	mov	r8, r3
		uint8_t DataPut[(PumpLen*2)];
 80008cc:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <processPumpData+0x198>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	005e      	lsls	r6, r3, #1
 80008d2:	1e73      	subs	r3, r6, #1
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4632      	mov	r2, r6
 80008d8:	2300      	movs	r3, #0
 80008da:	4614      	mov	r4, r2
 80008dc:	461d      	mov	r5, r3
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	00eb      	lsls	r3, r5, #3
 80008e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008ec:	00e2      	lsls	r2, r4, #3
 80008ee:	4632      	mov	r2, r6
 80008f0:	2300      	movs	r3, #0
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	00cb      	lsls	r3, r1, #3
 8000900:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000904:	00c2      	lsls	r2, r0, #3
 8000906:	4633      	mov	r3, r6
 8000908:	3307      	adds	r3, #7
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	ebad 0d03 	sub.w	sp, sp, r3
 8000912:	466b      	mov	r3, sp
 8000914:	3300      	adds	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
		int index1 = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
		int index2 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]

		  for (index1 = 0; index1 < PumpLen; index1++){
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e06b      	b.n	80009fe <processPumpData+0x13e>

			  DataPut[index2] = ((PUMP_BUFF[index1] >> 4) & 0x0F);
 8000926:	4a4d      	ldr	r2, [pc, #308]	; (8000a5c <processPumpData+0x19c>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	b2d9      	uxtb	r1, r3
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4413      	add	r3, r2
 8000938:	460a      	mov	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]
			  if ((DataPut[index2] >= 0x00) && (DataPut[index2] <= 0x09)) {
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b09      	cmp	r3, #9
 8000946:	d80b      	bhi.n	8000960 <processPumpData+0xa0>
				  DataPut[index2] = DataPut[index2] + 0x30;
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	3330      	adds	r3, #48	; 0x30
 8000952:	b2d9      	uxtb	r1, r3
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4413      	add	r3, r2
 800095a:	460a      	mov	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e016      	b.n	800098e <processPumpData+0xce>
			  }
			  else if ((DataPut[index2] >= 0x0A) && (DataPut[index2] <= 0x0F)) {
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b09      	cmp	r3, #9
 800096a:	d910      	bls.n	800098e <processPumpData+0xce>
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <processPumpData+0xce>
				  DataPut[index2] = DataPut[index2] + 0x37;
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3337      	adds	r3, #55	; 0x37
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4413      	add	r3, r2
 800098a:	460a      	mov	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
			  }
				  DataPut[(index2+1)] = (PUMP_BUFF[index1] & 0x0F);
 800098e:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <processPumpData+0x19c>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	f002 020f 	and.w	r2, r2, #15
 800099e:	b2d1      	uxtb	r1, r2
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	54d1      	strb	r1, [r2, r3]

			  if ((DataPut[(index2+1)] >= 0x00) && (DataPut[(index2+1)] <= 0x09)) {
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3301      	adds	r3, #1
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	d80a      	bhi.n	80009c6 <processPumpData+0x106>
				  DataPut[(index2+1)] = DataPut[(index2+1)] + 0x30;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3301      	adds	r3, #1
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	5cd2      	ldrb	r2, [r2, r3]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	3230      	adds	r2, #48	; 0x30
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	54d1      	strb	r1, [r2, r3]
 80009c4:	e015      	b.n	80009f2 <processPumpData+0x132>
			  }
			  else if ((DataPut[(index2+1)] >= 0x0A) && (DataPut[(index2+1)] <= 0x0F)) {
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	3301      	adds	r3, #1
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	2b09      	cmp	r3, #9
 80009d0:	d90f      	bls.n	80009f2 <processPumpData+0x132>
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3301      	adds	r3, #1
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d809      	bhi.n	80009f2 <processPumpData+0x132>
				  DataPut[(index2+1)] = DataPut[(index2+1)] + 0x37;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	3301      	adds	r3, #1
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	5cd2      	ldrb	r2, [r2, r3]
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3301      	adds	r3, #1
 80009ea:	3237      	adds	r2, #55	; 0x37
 80009ec:	b2d1      	uxtb	r1, r2
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	54d1      	strb	r1, [r2, r3]
			  }
			  index2 = index2 + 2;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3302      	adds	r3, #2
 80009f6:	60bb      	str	r3, [r7, #8]
		  for (index1 = 0; index1 < PumpLen; index1++){
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <processPumpData+0x198>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4293      	cmp	r3, r2
 8000a08:	db8d      	blt.n	8000926 <processPumpData+0x66>
			  }
			HAL_UART_Transmit(&huart4, (uint8_t*)"{\"resourceType\":\"Observation\",\"id\":\"216\",\"subject\":{\"reference\":\"Patient/2\"},\"component\":[{\"valueSampledData\":{\"data\":\"", DATA_LEN, HAL_MAX_DELAY);
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	2277      	movs	r2, #119	; 0x77
 8000a10:	4913      	ldr	r1, [pc, #76]	; (8000a60 <processPumpData+0x1a0>)
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <processPumpData+0x1a4>)
 8000a14:	f004 fac8 	bl	8004fa8 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f000 fe45 	bl	80016a8 <HAL_Delay>
			HAL_UART_Transmit(&huart4, DataPut, (PumpLen * 2), HAL_MAX_DELAY);
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <processPumpData+0x198>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <processPumpData+0x1a4>)
 8000a2e:	f004 fabb 	bl	8004fa8 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f000 fe38 	bl	80016a8 <HAL_Delay>
			HAL_UART_Transmit(&huart4, (uint8_t*)"\"}}]}", 5, HAL_MAX_DELAY);
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	490a      	ldr	r1, [pc, #40]	; (8000a68 <processPumpData+0x1a8>)
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <processPumpData+0x1a4>)
 8000a42:	f004 fab1 	bl	8004fa8 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 fe2e 	bl	80016a8 <HAL_Delay>
 8000a4c:	46c5      	mov	sp, r8
	}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a58:	24001fae 	.word	0x24001fae
 8000a5c:	24001d84 	.word	0x24001d84
 8000a60:	08008014 	.word	0x08008014
 8000a64:	2400007c 	.word	0x2400007c
 8000a68:	0800808c 	.word	0x0800808c

08000a6c <HAL_UARTEx_RxEventCallback>:

	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b092      	sub	sp, #72	; 0x48
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
		if (huart->Instance == UART4) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a8a      	ldr	r2, [pc, #552]	; (8000ca8 <HAL_UARTEx_RxEventCallback+0x23c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	f040 80b7 	bne.w	8000bf2 <HAL_UARTEx_RxEventCallback+0x186>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2102      	movs	r1, #2
 8000a88:	4888      	ldr	r0, [pc, #544]	; (8000cac <HAL_UARTEx_RxEventCallback+0x240>)
 8000a8a:	f001 fe79 	bl	8002780 <HAL_GPIO_WritePin>
			ModemLen = Size;
 8000a8e:	4a88      	ldr	r2, [pc, #544]	; (8000cb0 <HAL_UARTEx_RxEventCallback+0x244>)
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	8013      	strh	r3, [r2, #0]

			if (strstr((char *)MODEM_BUFF, "OK\r\n") && state == STATE_INIT) {
 8000a94:	4987      	ldr	r1, [pc, #540]	; (8000cb4 <HAL_UARTEx_RxEventCallback+0x248>)
 8000a96:	4888      	ldr	r0, [pc, #544]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000a98:	f006 fdca 	bl	8007630 <strstr>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_UARTEx_RxEventCallback+0x46>
 8000aa2:	4b86      	ldr	r3, [pc, #536]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <HAL_UARTEx_RxEventCallback+0x46>
				state = STATE_CONF_CONTTYPE;
 8000aaa:	4b84      	ldr	r3, [pc, #528]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e084      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if (strstr((char *)MODEM_BUFF, "+CME ERROR")) {
 8000ab2:	4983      	ldr	r1, [pc, #524]	; (8000cc0 <HAL_UARTEx_RxEventCallback+0x254>)
 8000ab4:	4880      	ldr	r0, [pc, #512]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000ab6:	f006 fdbb 	bl	8007630 <strstr>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_UARTEx_RxEventCallback+0x5c>
				startFlag = 0;
 8000ac0:	4b80      	ldr	r3, [pc, #512]	; (8000cc4 <HAL_UARTEx_RxEventCallback+0x258>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e079      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
				//HAL_NVIC_SystemReset();
			}
			else if (strstr((char *)MODEM_BUFF, "OK\r\n") && state == STATE_CONF_CONTTYPE) {
 8000ac8:	497a      	ldr	r1, [pc, #488]	; (8000cb4 <HAL_UARTEx_RxEventCallback+0x248>)
 8000aca:	487b      	ldr	r0, [pc, #492]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000acc:	f006 fdb0 	bl	8007630 <strstr>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <HAL_UARTEx_RxEventCallback+0x7a>
 8000ad6:	4b79      	ldr	r3, [pc, #484]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d103      	bne.n	8000ae6 <HAL_UARTEx_RxEventCallback+0x7a>
				state = STATE_NETWORK_INFO;
 8000ade:	4b77      	ldr	r3, [pc, #476]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e06a      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if (strstr((char *)MODEM_BUFF, "NOCONN") && state == STATE_NETWORK_INFO) {
 8000ae6:	4978      	ldr	r1, [pc, #480]	; (8000cc8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8000ae8:	4873      	ldr	r0, [pc, #460]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000aea:	f006 fda1 	bl	8007630 <strstr>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d007      	beq.n	8000b04 <HAL_UARTEx_RxEventCallback+0x98>
 8000af4:	4b71      	ldr	r3, [pc, #452]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d103      	bne.n	8000b04 <HAL_UARTEx_RxEventCallback+0x98>
				state = STATE_URL_INFO;
 8000afc:	4b6f      	ldr	r3, [pc, #444]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e05b      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if (strstr((char *)MODEM_BUFF,"CONNECT") && state == STATE_URL_INFO) {
 8000b04:	4971      	ldr	r1, [pc, #452]	; (8000ccc <HAL_UARTEx_RxEventCallback+0x260>)
 8000b06:	486c      	ldr	r0, [pc, #432]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b08:	f006 fd92 	bl	8007630 <strstr>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <HAL_UARTEx_RxEventCallback+0xb6>
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d103      	bne.n	8000b22 <HAL_UARTEx_RxEventCallback+0xb6>
				state = STATE_SEND_URL;
 8000b1a:	4b68      	ldr	r3, [pc, #416]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e04c      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if (strstr((char *)MODEM_BUFF, "OK\r\n") && state == STATE_SEND_URL) {
 8000b22:	4964      	ldr	r1, [pc, #400]	; (8000cb4 <HAL_UARTEx_RxEventCallback+0x248>)
 8000b24:	4864      	ldr	r0, [pc, #400]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b26:	f006 fd83 	bl	8007630 <strstr>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d007      	beq.n	8000b40 <HAL_UARTEx_RxEventCallback+0xd4>
 8000b30:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d103      	bne.n	8000b40 <HAL_UARTEx_RxEventCallback+0xd4>
				state = STATE_GET_HTTP;
 8000b38:	4b60      	ldr	r3, [pc, #384]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e03d      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if (strstr((char *)MODEM_BUFF, "QHTTPGET: 0,200")) {
 8000b40:	4963      	ldr	r1, [pc, #396]	; (8000cd0 <HAL_UARTEx_RxEventCallback+0x264>)
 8000b42:	485d      	ldr	r0, [pc, #372]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b44:	f006 fd74 	bl	8007630 <strstr>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_UARTEx_RxEventCallback+0xea>
				state = STATE_PROCESS_DATA;
 8000b4e:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b50:	2206      	movs	r2, #6
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e032      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if ((strstr((char *)MODEM_BUFF, "CONNECT") != NULL) && state == STATE_REPEAT){
 8000b56:	495d      	ldr	r1, [pc, #372]	; (8000ccc <HAL_UARTEx_RxEventCallback+0x260>)
 8000b58:	4857      	ldr	r0, [pc, #348]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b5a:	f006 fd69 	bl	8007630 <strstr>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <HAL_UARTEx_RxEventCallback+0x108>
 8000b64:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d103      	bne.n	8000b74 <HAL_UARTEx_RxEventCallback+0x108>
				state = STATE_PROCESS_DATA;
 8000b6c:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b6e:	2206      	movs	r2, #6
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e023      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if ((strstr((char *)MODEM_BUFF, "QHTTPPUT: 0,200") != NULL)){
 8000b74:	4957      	ldr	r1, [pc, #348]	; (8000cd4 <HAL_UARTEx_RxEventCallback+0x268>)
 8000b76:	4850      	ldr	r0, [pc, #320]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b78:	f006 fd5a 	bl	8007630 <strstr>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <HAL_UARTEx_RxEventCallback+0x126>
				HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b86:	f000 fd8f 	bl	80016a8 <HAL_Delay>
				state = STATE_PROCESS_DATA;
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e014      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if ((strstr((char *)MODEM_BUFF, "QHTTPPUT: 702")!= NULL)){
 8000b92:	4951      	ldr	r1, [pc, #324]	; (8000cd8 <HAL_UARTEx_RxEventCallback+0x26c>)
 8000b94:	4848      	ldr	r0, [pc, #288]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000b96:	f006 fd4b 	bl	8007630 <strstr>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_UARTEx_RxEventCallback+0x13c>
				state = STATE_GET_HTTP;
 8000ba0:	4b46      	ldr	r3, [pc, #280]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e009      	b.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
			}
			else if ((strstr((char *)MODEM_BUFF, "QHTTPPUT: 0,400")!= NULL)){
 8000ba8:	494c      	ldr	r1, [pc, #304]	; (8000cdc <HAL_UARTEx_RxEventCallback+0x270>)
 8000baa:	4843      	ldr	r0, [pc, #268]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000bac:	f006 fd40 	bl	8007630 <strstr>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_UARTEx_RxEventCallback+0x150>
				state = STATE_READ;
 8000bb6:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	701a      	strb	r2, [r3, #0]
			}

			HAL_UARTEx_ReceiveToIdle_IT(&huart4, MODEM_BUFF, MODEM_BUFF_SIZE);
 8000bbc:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000bc0:	493d      	ldr	r1, [pc, #244]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000bc2:	4847      	ldr	r0, [pc, #284]	; (8000ce0 <HAL_UARTEx_RxEventCallback+0x274>)
 8000bc4:	f006 fc61 	bl	800748a <HAL_UARTEx_ReceiveToIdle_IT>
			HAL_UART_Transmit(&huart3, MODEM_BUFF, ModemLen, HAL_MAX_DELAY);
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <HAL_UARTEx_RxEventCallback+0x244>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	4939      	ldr	r1, [pc, #228]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000bd2:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <HAL_UARTEx_RxEventCallback+0x278>)
 8000bd4:	f004 f9e8 	bl	8004fa8 <HAL_UART_Transmit>
			memset(MODEM_BUFF,0,ModemLen);
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <HAL_UARTEx_RxEventCallback+0x244>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000be2:	f006 fd1d 	bl	8007620 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	4830      	ldr	r0, [pc, #192]	; (8000cac <HAL_UARTEx_RxEventCallback+0x240>)
 8000bec:	f001 fdc8 	bl	8002780 <HAL_GPIO_WritePin>
			else if (pumpFlag == 1){
				processPumpData();
				pumpFlag = 0;
			}
	}
	}
 8000bf0:	e055      	b.n	8000c9e <HAL_UARTEx_RxEventCallback+0x232>
		else if (huart->Instance == USART3) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a3c      	ldr	r2, [pc, #240]	; (8000ce8 <HAL_UARTEx_RxEventCallback+0x27c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d111      	bne.n	8000c20 <HAL_UARTEx_RxEventCallback+0x1b4>
			TermLen = Size;
 8000bfc:	4a3b      	ldr	r2, [pc, #236]	; (8000cec <HAL_UARTEx_RxEventCallback+0x280>)
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart4, TERMINAL_BUFF, TermLen, HAL_MAX_DELAY);
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <HAL_UARTEx_RxEventCallback+0x280>)
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	4939      	ldr	r1, [pc, #228]	; (8000cf0 <HAL_UARTEx_RxEventCallback+0x284>)
 8000c0c:	4834      	ldr	r0, [pc, #208]	; (8000ce0 <HAL_UARTEx_RxEventCallback+0x274>)
 8000c0e:	f004 f9cb 	bl	8004fa8 <HAL_UART_Transmit>
			HAL_UARTEx_ReceiveToIdle_IT(&huart3, TERMINAL_BUFF, TERMINAL_BUFF_SIZE);
 8000c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c16:	4936      	ldr	r1, [pc, #216]	; (8000cf0 <HAL_UARTEx_RxEventCallback+0x284>)
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <HAL_UARTEx_RxEventCallback+0x278>)
 8000c1a:	f006 fc36 	bl	800748a <HAL_UARTEx_ReceiveToIdle_IT>
	}
 8000c1e:	e03e      	b.n	8000c9e <HAL_UARTEx_RxEventCallback+0x232>
		else if (huart->Instance == USART1) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <HAL_UARTEx_RxEventCallback+0x288>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d139      	bne.n	8000c9e <HAL_UARTEx_RxEventCallback+0x232>
			PumpLen = Size;
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <HAL_UARTEx_RxEventCallback+0x28c>)
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	8013      	strh	r3, [r2, #0]
			total_len = DATA_LEN + (PumpLen * 2) + 5;
 8000c30:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <HAL_UARTEx_RxEventCallback+0x28c>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	333e      	adds	r3, #62	; 0x3e
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x290>)
 8000c3e:	801a      	strh	r2, [r3, #0]
			if (pumpFlag == 0) {
 8000c40:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x294>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d121      	bne.n	8000c8c <HAL_UARTEx_RxEventCallback+0x220>
				sprintf(put_command, "AT+QHTTPPUT=%d,20,20\r\n", total_len);
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x290>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	492c      	ldr	r1, [pc, #176]	; (8000d04 <HAL_UARTEx_RxEventCallback+0x298>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 fcc3 	bl	80075e0 <siprintf>
				HAL_UART_Transmit(&huart4, (uint8_t *)put_command, strlen(put_command), HAL_MAX_DELAY);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fb3e 	bl	80002e0 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f107 0108 	add.w	r1, r7, #8
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <HAL_UARTEx_RxEventCallback+0x274>)
 8000c72:	f004 f999 	bl	8004fa8 <HAL_UART_Transmit>
				state = STATE_REPEAT;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UARTEx_RxEventCallback+0x250>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(2800);
 8000c7c:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000c80:	f000 fd12 	bl	80016a8 <HAL_Delay>
				pumpFlag = 1;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x294>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
	}
 8000c8a:	e008      	b.n	8000c9e <HAL_UARTEx_RxEventCallback+0x232>
			else if (pumpFlag == 1){
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x294>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d104      	bne.n	8000c9e <HAL_UARTEx_RxEventCallback+0x232>
				processPumpData();
 8000c94:	f7ff fe14 	bl	80008c0 <processPumpData>
				pumpFlag = 0;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x294>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	}
 8000c9e:	bf00      	nop
 8000ca0:	3748      	adds	r7, #72	; 0x48
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004c00 	.word	0x40004c00
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	24001fac 	.word	0x24001fac
 8000cb4:	08008094 	.word	0x08008094
 8000cb8:	2400022c 	.word	0x2400022c
 8000cbc:	24001fb6 	.word	0x24001fb6
 8000cc0:	0800809c 	.word	0x0800809c
 8000cc4:	24001fb4 	.word	0x24001fb4
 8000cc8:	080080a8 	.word	0x080080a8
 8000ccc:	080080b0 	.word	0x080080b0
 8000cd0:	080080b8 	.word	0x080080b8
 8000cd4:	080080c8 	.word	0x080080c8
 8000cd8:	080080d8 	.word	0x080080d8
 8000cdc:	080080e8 	.word	0x080080e8
 8000ce0:	2400007c 	.word	0x2400007c
 8000ce4:	2400019c 	.word	0x2400019c
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	24001fb0 	.word	0x24001fb0
 8000cf0:	24001e80 	.word	0x24001e80
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	24001fae 	.word	0x24001fae
 8000cfc:	24001fb2 	.word	0x24001fb2
 8000d00:	24001fb5 	.word	0x24001fb5
 8000d04:	080080f8 	.word	0x080080f8

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d12:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d14:	bf00      	nop
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <main+0xd8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <main+0x24>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dcf4      	bgt.n	8000d16 <main+0xe>
  if ( timeout < 0 )
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da01      	bge.n	8000d36 <main+0x2e>
  {
  Error_Handler();
 8000d32:	f000 fa4b 	bl	80011cc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 fc25 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f85f 	bl	8000dfc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <main+0xd8>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <main+0xd8>)
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <main+0xd8>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f001 fd29 	bl	80027b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f001 fd3f 	bl	80027e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d70:	bf00      	nop
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0xd8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d104      	bne.n	8000d88 <main+0x80>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dcf4      	bgt.n	8000d72 <main+0x6a>
if ( timeout < 0 )
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da01      	bge.n	8000d92 <main+0x8a>
{
Error_Handler();
 8000d8e:	f000 fa1d 	bl	80011cc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 f983 	bl	800109c <MX_GPIO_Init>
  MX_UART4_Init();
 8000d96:	f000 f89d 	bl	8000ed4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 f8e7 	bl	8000f6c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000d9e:	f000 f931 	bl	8001004 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart4, MODEM_BUFF, 7000);
 8000da2:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000da6:	490f      	ldr	r1, [pc, #60]	; (8000de4 <main+0xdc>)
 8000da8:	480f      	ldr	r0, [pc, #60]	; (8000de8 <main+0xe0>)
 8000daa:	f006 fb6e 	bl	800748a <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, TERMINAL_BUFF, 300);
 8000dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <main+0xe4>)
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <main+0xe8>)
 8000db6:	f006 fb68 	bl	800748a <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <main+0xec>)
 8000dc0:	f001 fcc6 	bl	8002750 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <main+0xc8>
		  startFlag = 1;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <main+0xf0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
	  }
	  if (startFlag == 1) {
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <main+0xf0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d1f0      	bne.n	8000dba <main+0xb2>
	      processFlag();
 8000dd8:	f7ff fd0a 	bl	80007f0 <processFlag>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000ddc:	e7ed      	b.n	8000dba <main+0xb2>
 8000dde:	bf00      	nop
 8000de0:	58024400 	.word	0x58024400
 8000de4:	2400022c 	.word	0x2400022c
 8000de8:	2400007c 	.word	0x2400007c
 8000dec:	24001e80 	.word	0x24001e80
 8000df0:	2400019c 	.word	0x2400019c
 8000df4:	58020800 	.word	0x58020800
 8000df8:	24001fb4 	.word	0x24001fb4

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b09c      	sub	sp, #112	; 0x70
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	224c      	movs	r2, #76	; 0x4c
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fc08 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2220      	movs	r2, #32
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 fc02 	bl	8007620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e1c:	2004      	movs	r0, #4
 8000e1e:	f001 fcf7 	bl	8002810 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e58:	bf00      	nop
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e66:	d1f8      	bne.n	8000e5a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fd21 	bl	80028c4 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e88:	f000 f9a0 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	233f      	movs	r3, #63	; 0x3f
 8000e8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV4;
 8000e94:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f934 	bl	8003120 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 f985 	bl	80011cc <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	; 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	58000400 	.word	0x58000400
 8000ed0:	58024800 	.word	0x58024800

08000ed4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_UART4_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_UART4_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_UART4_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_UART4_Init+0x90>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f1e:	f003 fff3 	bl	8004f08 <HAL_UART_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f28:	f000 f950 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f30:	f006 fa2f 	bl	8007392 <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 f947 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f42:	f006 fa64 	bl	800740e <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 f93e 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f52:	f006 f9e5 	bl	8007320 <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 f936 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2400007c 	.word	0x2400007c
 8000f68:	40004c00 	.word	0x40004c00

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_USART1_UART_Init+0x94>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fb6:	f003 ffa7 	bl	8004f08 <HAL_UART_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fc0:	f000 f904 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fc8:	f006 f9e3 	bl	8007392 <HAL_UARTEx_SetTxFifoThreshold>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fd2:	f000 f8fb 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fda:	f006 fa18 	bl	800740e <HAL_UARTEx_SetRxFifoThreshold>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f000 f8f2 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_USART1_UART_Init+0x90>)
 8000fea:	f006 f999 	bl	8007320 <HAL_UARTEx_DisableFifoMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f000 f8ea 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2400010c 	.word	0x2400010c
 8001000:	40011000 	.word	0x40011000

08001004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_USART3_UART_Init+0x90>)
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <MX_USART3_UART_Init+0x94>)
 800100c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_USART3_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_USART3_UART_Init+0x90>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_USART3_UART_Init+0x90>)
 800104e:	f003 ff5b 	bl	8004f08 <HAL_UART_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001058:	f000 f8b8 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105c:	2100      	movs	r1, #0
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001060:	f006 f997 	bl	8007392 <HAL_UARTEx_SetTxFifoThreshold>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800106a:	f000 f8af 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001072:	f006 f9cc 	bl	800740e <HAL_UARTEx_SetRxFifoThreshold>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800107c:	f000 f8a6 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_USART3_UART_Init+0x90>)
 8001082:	f006 f94d 	bl	8007320 <HAL_UARTEx_DisableFifoMode>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800108c:	f000 f89e 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2400019c 	.word	0x2400019c
 8001098:	40004800 	.word	0x40004800

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <MX_GPIO_Init+0x120>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a40      	ldr	r2, [pc, #256]	; (80011bc <MX_GPIO_Init+0x120>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <MX_GPIO_Init+0x120>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <MX_GPIO_Init+0x120>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a39      	ldr	r2, [pc, #228]	; (80011bc <MX_GPIO_Init+0x120>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <MX_GPIO_Init+0x120>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <MX_GPIO_Init+0x120>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a31      	ldr	r2, [pc, #196]	; (80011bc <MX_GPIO_Init+0x120>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <MX_GPIO_Init+0x120>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_GPIO_Init+0x120>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <MX_GPIO_Init+0x120>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_GPIO_Init+0x120>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_GPIO_Init+0x120>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a22      	ldr	r2, [pc, #136]	; (80011bc <MX_GPIO_Init+0x120>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_GPIO_Init+0x120>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f244 0101 	movw	r1, #16385	; 0x4001
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x124>)
 8001150:	f001 fb16 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2102      	movs	r1, #2
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <MX_GPIO_Init+0x128>)
 800115a:	f001 fb11 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_GPIO_Init+0x12c>)
 8001174:	f001 f93c 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001178:	f244 0301 	movw	r3, #16385	; 0x4001
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <MX_GPIO_Init+0x124>)
 8001192:	f001 f92d 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_GPIO_Init+0x128>)
 80011ae:	f001 f91f 	bl	80023f0 <HAL_GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58021000 	.word	0x58021000
 80011c8:	58020800 	.word	0x58020800

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_MspInit+0x30>)
 80011e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x30>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x30>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	58024400 	.word	0x58024400

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0bc      	sub	sp, #240	; 0xf0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	22bc      	movs	r2, #188	; 0xbc
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 f9f7 	bl	8007620 <memset>
  if(huart->Instance==UART4)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a79      	ldr	r2, [pc, #484]	; (800141c <HAL_UART_MspInit+0x210>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d14b      	bne.n	80012d4 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f002 faf4 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001256:	f7ff ffb9 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800125a:	4b71      	ldr	r3, [pc, #452]	; (8001420 <HAL_UART_MspInit+0x214>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001260:	4a6f      	ldr	r2, [pc, #444]	; (8001420 <HAL_UART_MspInit+0x214>)
 8001262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001266:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_UART_MspInit+0x214>)
 800126c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <HAL_UART_MspInit+0x214>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	4a68      	ldr	r2, [pc, #416]	; (8001420 <HAL_UART_MspInit+0x214>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <HAL_UART_MspInit+0x214>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012b0:	2308      	movs	r3, #8
 80012b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ba:	4619      	mov	r1, r3
 80012bc:	4859      	ldr	r0, [pc, #356]	; (8001424 <HAL_UART_MspInit+0x218>)
 80012be:	f001 f897 	bl	80023f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	2034      	movs	r0, #52	; 0x34
 80012c8:	f000 faf9 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80012cc:	2034      	movs	r0, #52	; 0x34
 80012ce:	f000 fb10 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012d2:	e09f      	b.n	8001414 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a53      	ldr	r2, [pc, #332]	; (8001428 <HAL_UART_MspInit+0x21c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d14a      	bne.n	8001374 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 faa3 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80012f8:	f7ff ff68 	bl	80011cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_UART_MspInit+0x214>)
 80012fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001302:	4a47      	ldr	r2, [pc, #284]	; (8001420 <HAL_UART_MspInit+0x214>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <HAL_UART_MspInit+0x214>)
 800130e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_UART_MspInit+0x214>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_UART_MspInit+0x214>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_UART_MspInit+0x214>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001338:	23c0      	movs	r3, #192	; 0xc0
 800133a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001350:	2307      	movs	r3, #7
 8001352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800135a:	4619      	mov	r1, r3
 800135c:	4831      	ldr	r0, [pc, #196]	; (8001424 <HAL_UART_MspInit+0x218>)
 800135e:	f001 f847 	bl	80023f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2103      	movs	r1, #3
 8001366:	2025      	movs	r0, #37	; 0x25
 8001368:	f000 faa9 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136c:	2025      	movs	r0, #37	; 0x25
 800136e:	f000 fac0 	bl	80018f2 <HAL_NVIC_EnableIRQ>
}
 8001372:	e04f      	b.n	8001414 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2c      	ldr	r2, [pc, #176]	; (800142c <HAL_UART_MspInit+0x220>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d14a      	bne.n	8001414 <HAL_UART_MspInit+0x208>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fa53 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001398:	f7ff ff18 	bl	80011cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_UART_MspInit+0x214>)
 800139e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_UART_MspInit+0x214>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_UART_MspInit+0x214>)
 80013ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_UART_MspInit+0x214>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_UART_MspInit+0x214>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_MspInit+0x214>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f2:	2307      	movs	r3, #7
 80013f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013fc:	4619      	mov	r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <HAL_UART_MspInit+0x224>)
 8001400:	f000 fff6 	bl	80023f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f000 fa58 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800140e:	2027      	movs	r0, #39	; 0x27
 8001410:	f000 fa6f 	bl	80018f2 <HAL_NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	37f0      	adds	r7, #240	; 0xf0
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40004c00 	.word	0x40004c00
 8001420:	58024400 	.word	0x58024400
 8001424:	58020400 	.word	0x58020400
 8001428:	40011000 	.word	0x40011000
 800142c:	40004800 	.word	0x40004800
 8001430:	58020c00 	.word	0x58020c00

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f8f2 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <USART1_IRQHandler+0x10>)
 800148e:	f003 fe21 	bl	80050d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2400010c 	.word	0x2400010c

0800149c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <USART3_IRQHandler+0x10>)
 80014a2:	f003 fe17 	bl	80050d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2400019c 	.word	0x2400019c

080014b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <UART4_IRQHandler+0x10>)
 80014b6:	f003 fe0d 	bl	80050d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2400007c 	.word	0x2400007c

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f006 f8b2 	bl	800765c <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24040000 	.word	0x24040000
 8001524:	00000400 	.word	0x00000400
 8001528:	24001fb8 	.word	0x24001fb8
 800152c:	24002108 	.word	0x24002108

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001534:	f7ff f8aa 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	; (800157c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f006 f883 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fbd1 	bl	8000d08 <main>
  bx  lr
 8001566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800156c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001570:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001574:	0800818c 	.word	0x0800818c
  ldr r2, =_sbss
 8001578:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800157c:	24002108 	.word	0x24002108

08001580 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC3_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f98c 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001590:	f001 ff7c 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_Init+0x68>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	4913      	ldr	r1, [pc, #76]	; (80015f0 <HAL_Init+0x6c>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_Init+0x68>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_Init+0x6c>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_Init+0x70>)
 80015c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_Init+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 f814 	bl	80015fc <HAL_InitTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e002      	b.n	80015e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015de:	f7ff fdfb 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58024400 	.word	0x58024400
 80015f0:	08008110 	.word	0x08008110
 80015f4:	24000004 	.word	0x24000004
 80015f8:	24000000 	.word	0x24000000

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_InitTick+0x60>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e021      	b.n	8001654 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_InitTick+0x64>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_InitTick+0x60>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f971 	bl	800190e <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f93b 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x68>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2400000c 	.word	0x2400000c
 8001660:	24000000 	.word	0x24000000
 8001664:	24000008 	.word	0x24000008

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2400000c 	.word	0x2400000c
 800168c:	24001fbc 	.word	0x24001fbc

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	24001fbc 	.word	0x24001fbc

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2400000c 	.word	0x2400000c

080016f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetREVID+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0c1b      	lsrs	r3, r3, #16
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	5c001000 	.word	0x5c001000

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <__NVIC_SetPriorityGrouping+0x40>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	4313      	orrs	r3, r2
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x40>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	05fa0000 	.word	0x05fa0000

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff29 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff40 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff90 	bl	80017fc <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5f 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff33 	bl	800176c <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa4 	bl	8001864 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff feae 	bl	8001690 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e2dc      	b.n	8001efa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e2cd      	b.n	8001efa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a76      	ldr	r2, [pc, #472]	; (8001b3c <HAL_DMA_Abort+0x214>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04a      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a74      	ldr	r2, [pc, #464]	; (8001b40 <HAL_DMA_Abort+0x218>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d045      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a73      	ldr	r2, [pc, #460]	; (8001b44 <HAL_DMA_Abort+0x21c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d040      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_DMA_Abort+0x220>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d03b      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a70      	ldr	r2, [pc, #448]	; (8001b4c <HAL_DMA_Abort+0x224>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d036      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_DMA_Abort+0x228>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d031      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6d      	ldr	r2, [pc, #436]	; (8001b54 <HAL_DMA_Abort+0x22c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d02c      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6b      	ldr	r2, [pc, #428]	; (8001b58 <HAL_DMA_Abort+0x230>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d027      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6a      	ldr	r2, [pc, #424]	; (8001b5c <HAL_DMA_Abort+0x234>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a68      	ldr	r2, [pc, #416]	; (8001b60 <HAL_DMA_Abort+0x238>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01d      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_DMA_Abort+0x23c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d018      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_DMA_Abort+0x240>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a64      	ldr	r2, [pc, #400]	; (8001b6c <HAL_DMA_Abort+0x244>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00e      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a62      	ldr	r2, [pc, #392]	; (8001b70 <HAL_DMA_Abort+0x248>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d009      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a61      	ldr	r2, [pc, #388]	; (8001b74 <HAL_DMA_Abort+0x24c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d004      	beq.n	80019fe <HAL_DMA_Abort+0xd6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <HAL_DMA_Abort+0x250>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Abort+0xda>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_DMA_Abort+0xdc>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 021e 	bic.w	r2, r2, #30
 8001a16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e00a      	b.n	8001a46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020e 	bic.w	r2, r2, #14
 8001a3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <HAL_DMA_Abort+0x214>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d072      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <HAL_DMA_Abort+0x218>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d06d      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <HAL_DMA_Abort+0x21c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d068      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a37      	ldr	r2, [pc, #220]	; (8001b48 <HAL_DMA_Abort+0x220>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d063      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_DMA_Abort+0x224>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d05e      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <HAL_DMA_Abort+0x228>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d059      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a33      	ldr	r2, [pc, #204]	; (8001b54 <HAL_DMA_Abort+0x22c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d054      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_DMA_Abort+0x230>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d04f      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <HAL_DMA_Abort+0x234>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04a      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <HAL_DMA_Abort+0x238>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d045      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_DMA_Abort+0x23c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d040      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_DMA_Abort+0x240>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d03b      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2a      	ldr	r2, [pc, #168]	; (8001b6c <HAL_DMA_Abort+0x244>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d036      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_DMA_Abort+0x248>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_DMA_Abort+0x24c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d02c      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_DMA_Abort+0x250>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d027      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <HAL_DMA_Abort+0x254>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_DMA_Abort+0x258>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_DMA_Abort+0x25c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_DMA_Abort+0x260>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_DMA_Abort+0x264>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_DMA_Abort+0x268>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_DMA_Abort+0x26c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Abort+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_DMA_Abort+0x270>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d132      	bne.n	8001b9c <HAL_DMA_Abort+0x274>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e031      	b.n	8001b9e <HAL_DMA_Abort+0x276>
 8001b3a:	bf00      	nop
 8001b3c:	40020010 	.word	0x40020010
 8001b40:	40020028 	.word	0x40020028
 8001b44:	40020040 	.word	0x40020040
 8001b48:	40020058 	.word	0x40020058
 8001b4c:	40020070 	.word	0x40020070
 8001b50:	40020088 	.word	0x40020088
 8001b54:	400200a0 	.word	0x400200a0
 8001b58:	400200b8 	.word	0x400200b8
 8001b5c:	40020410 	.word	0x40020410
 8001b60:	40020428 	.word	0x40020428
 8001b64:	40020440 	.word	0x40020440
 8001b68:	40020458 	.word	0x40020458
 8001b6c:	40020470 	.word	0x40020470
 8001b70:	40020488 	.word	0x40020488
 8001b74:	400204a0 	.word	0x400204a0
 8001b78:	400204b8 	.word	0x400204b8
 8001b7c:	58025408 	.word	0x58025408
 8001b80:	5802541c 	.word	0x5802541c
 8001b84:	58025430 	.word	0x58025430
 8001b88:	58025444 	.word	0x58025444
 8001b8c:	58025458 	.word	0x58025458
 8001b90:	5802546c 	.word	0x5802546c
 8001b94:	58025480 	.word	0x58025480
 8001b98:	58025494 	.word	0x58025494
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6d      	ldr	r2, [pc, #436]	; (8001d6c <HAL_DMA_Abort+0x444>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d04a      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6b      	ldr	r2, [pc, #428]	; (8001d70 <HAL_DMA_Abort+0x448>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d045      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_DMA_Abort+0x44c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d040      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a68      	ldr	r2, [pc, #416]	; (8001d78 <HAL_DMA_Abort+0x450>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d03b      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_DMA_Abort+0x454>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d036      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_DMA_Abort+0x458>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a64      	ldr	r2, [pc, #400]	; (8001d84 <HAL_DMA_Abort+0x45c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d02c      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a62      	ldr	r2, [pc, #392]	; (8001d88 <HAL_DMA_Abort+0x460>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d027      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_DMA_Abort+0x464>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_DMA_Abort+0x468>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01d      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <HAL_DMA_Abort+0x46c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d018      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5c      	ldr	r2, [pc, #368]	; (8001d98 <HAL_DMA_Abort+0x470>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <HAL_DMA_Abort+0x474>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <HAL_DMA_Abort+0x478>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_DMA_Abort+0x47c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_DMA_Abort+0x32a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a56      	ldr	r2, [pc, #344]	; (8001da8 <HAL_DMA_Abort+0x480>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d108      	bne.n	8001c64 <HAL_DMA_Abort+0x33c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_DMA_Abort+0x34c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c74:	e013      	b.n	8001c9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c76:	f7ff fd0b 	bl	8001690 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d90c      	bls.n	8001c9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e12d      	b.n	8001efa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1e5      	bne.n	8001c76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <HAL_DMA_Abort+0x444>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04a      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2d      	ldr	r2, [pc, #180]	; (8001d70 <HAL_DMA_Abort+0x448>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d045      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <HAL_DMA_Abort+0x44c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d040      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <HAL_DMA_Abort+0x450>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d03b      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_DMA_Abort+0x454>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_DMA_Abort+0x458>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d031      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <HAL_DMA_Abort+0x45c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d02c      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_DMA_Abort+0x460>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_DMA_Abort+0x464>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_DMA_Abort+0x468>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_DMA_Abort+0x46c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_DMA_Abort+0x470>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_DMA_Abort+0x474>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_DMA_Abort+0x478>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_DMA_Abort+0x47c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_DMA_Abort+0x422>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_DMA_Abort+0x480>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Abort+0x426>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_Abort+0x428>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d02b      	beq.n	8001dac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	223f      	movs	r2, #63	; 0x3f
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	e02a      	b.n	8001dc2 <HAL_DMA_Abort+0x49a>
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	40020028 	.word	0x40020028
 8001d74:	40020040 	.word	0x40020040
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	40020070 	.word	0x40020070
 8001d80:	40020088 	.word	0x40020088
 8001d84:	400200a0 	.word	0x400200a0
 8001d88:	400200b8 	.word	0x400200b8
 8001d8c:	40020410 	.word	0x40020410
 8001d90:	40020428 	.word	0x40020428
 8001d94:	40020440 	.word	0x40020440
 8001d98:	40020458 	.word	0x40020458
 8001d9c:	40020470 	.word	0x40020470
 8001da0:	40020488 	.word	0x40020488
 8001da4:	400204a0 	.word	0x400204a0
 8001da8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_DMA_Abort+0x5dc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d072      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_DMA_Abort+0x5e0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d06d      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_DMA_Abort+0x5e4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d068      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_DMA_Abort+0x5e8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d063      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_DMA_Abort+0x5ec>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d05e      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a47      	ldr	r2, [pc, #284]	; (8001f18 <HAL_DMA_Abort+0x5f0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d059      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <HAL_DMA_Abort+0x5f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d054      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a44      	ldr	r2, [pc, #272]	; (8001f20 <HAL_DMA_Abort+0x5f8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d04f      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a43      	ldr	r2, [pc, #268]	; (8001f24 <HAL_DMA_Abort+0x5fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04a      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_DMA_Abort+0x600>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d045      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a40      	ldr	r2, [pc, #256]	; (8001f2c <HAL_DMA_Abort+0x604>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d040      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3e      	ldr	r2, [pc, #248]	; (8001f30 <HAL_DMA_Abort+0x608>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d03b      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	; (8001f34 <HAL_DMA_Abort+0x60c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d036      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_DMA_Abort+0x610>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_DMA_Abort+0x614>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d02c      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a38      	ldr	r2, [pc, #224]	; (8001f40 <HAL_DMA_Abort+0x618>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d027      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_DMA_Abort+0x61c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a35      	ldr	r2, [pc, #212]	; (8001f48 <HAL_DMA_Abort+0x620>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <HAL_DMA_Abort+0x624>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <HAL_DMA_Abort+0x628>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_DMA_Abort+0x62c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <HAL_DMA_Abort+0x630>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_DMA_Abort+0x634>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort+0x58a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2c      	ldr	r2, [pc, #176]	; (8001f60 <HAL_DMA_Abort+0x638>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Abort+0x58e>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_Abort+0x590>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ec4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001edc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ee6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40020010 	.word	0x40020010
 8001f08:	40020028 	.word	0x40020028
 8001f0c:	40020040 	.word	0x40020040
 8001f10:	40020058 	.word	0x40020058
 8001f14:	40020070 	.word	0x40020070
 8001f18:	40020088 	.word	0x40020088
 8001f1c:	400200a0 	.word	0x400200a0
 8001f20:	400200b8 	.word	0x400200b8
 8001f24:	40020410 	.word	0x40020410
 8001f28:	40020428 	.word	0x40020428
 8001f2c:	40020440 	.word	0x40020440
 8001f30:	40020458 	.word	0x40020458
 8001f34:	40020470 	.word	0x40020470
 8001f38:	40020488 	.word	0x40020488
 8001f3c:	400204a0 	.word	0x400204a0
 8001f40:	400204b8 	.word	0x400204b8
 8001f44:	58025408 	.word	0x58025408
 8001f48:	5802541c 	.word	0x5802541c
 8001f4c:	58025430 	.word	0x58025430
 8001f50:	58025444 	.word	0x58025444
 8001f54:	58025458 	.word	0x58025458
 8001f58:	5802546c 	.word	0x5802546c
 8001f5c:	58025480 	.word	0x58025480
 8001f60:	58025494 	.word	0x58025494

08001f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e237      	b.n	80023e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e22c      	b.n	80023e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5c      	ldr	r2, [pc, #368]	; (8002104 <HAL_DMA_Abort_IT+0x1a0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d04a      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <HAL_DMA_Abort_IT+0x1a4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d045      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a59      	ldr	r2, [pc, #356]	; (800210c <HAL_DMA_Abort_IT+0x1a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d040      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_DMA_Abort_IT+0x1ac>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d03b      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_DMA_Abort_IT+0x1b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d036      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a55      	ldr	r2, [pc, #340]	; (8002118 <HAL_DMA_Abort_IT+0x1b4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d031      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a53      	ldr	r2, [pc, #332]	; (800211c <HAL_DMA_Abort_IT+0x1b8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02c      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_DMA_Abort_IT+0x1bc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d027      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_DMA_Abort_IT+0x1c0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_DMA_Abort_IT+0x1c4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d01d      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_DMA_Abort_IT+0x1c8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d018      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_DMA_Abort_IT+0x1cc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_DMA_Abort_IT+0x1d0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_DMA_Abort_IT+0x1d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_DMA_Abort_IT+0x1d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_DMA_Abort_IT+0xc8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a46      	ldr	r2, [pc, #280]	; (8002140 <HAL_DMA_Abort_IT+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Abort_IT+0xcc>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_DMA_Abort_IT+0xce>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8086 	beq.w	8002144 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2204      	movs	r2, #4
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <HAL_DMA_Abort_IT+0x1a0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d04a      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_DMA_Abort_IT+0x1a4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d045      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_DMA_Abort_IT+0x1a8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d040      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_DMA_Abort_IT+0x1ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d03b      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_DMA_Abort_IT+0x1b0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d036      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a28      	ldr	r2, [pc, #160]	; (8002118 <HAL_DMA_Abort_IT+0x1b4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d031      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_DMA_Abort_IT+0x1b8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02c      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_DMA_Abort_IT+0x1bc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d027      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_DMA_Abort_IT+0x1c0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d022      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_DMA_Abort_IT+0x1c4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d01d      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_DMA_Abort_IT+0x1c8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d018      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_DMA_Abort_IT+0x1cc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_DMA_Abort_IT+0x1d0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00e      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_DMA_Abort_IT+0x1d4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_DMA_Abort_IT+0x1d8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x17c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_DMA_Abort_IT+0x1dc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <HAL_DMA_Abort_IT+0x18e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e178      	b.n	80023e4 <HAL_DMA_Abort_IT+0x480>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e16f      	b.n	80023e4 <HAL_DMA_Abort_IT+0x480>
 8002104:	40020010 	.word	0x40020010
 8002108:	40020028 	.word	0x40020028
 800210c:	40020040 	.word	0x40020040
 8002110:	40020058 	.word	0x40020058
 8002114:	40020070 	.word	0x40020070
 8002118:	40020088 	.word	0x40020088
 800211c:	400200a0 	.word	0x400200a0
 8002120:	400200b8 	.word	0x400200b8
 8002124:	40020410 	.word	0x40020410
 8002128:	40020428 	.word	0x40020428
 800212c:	40020440 	.word	0x40020440
 8002130:	40020458 	.word	0x40020458
 8002134:	40020470 	.word	0x40020470
 8002138:	40020488 	.word	0x40020488
 800213c:	400204a0 	.word	0x400204a0
 8002140:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 020e 	bic.w	r2, r2, #14
 8002152:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6c      	ldr	r2, [pc, #432]	; (800230c <HAL_DMA_Abort_IT+0x3a8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d04a      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6b      	ldr	r2, [pc, #428]	; (8002310 <HAL_DMA_Abort_IT+0x3ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d045      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_DMA_Abort_IT+0x3b0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d040      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a68      	ldr	r2, [pc, #416]	; (8002318 <HAL_DMA_Abort_IT+0x3b4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d03b      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_DMA_Abort_IT+0x3b8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d036      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_DMA_Abort_IT+0x3bc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d031      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a63      	ldr	r2, [pc, #396]	; (8002324 <HAL_DMA_Abort_IT+0x3c0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02c      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_DMA_Abort_IT+0x3c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d027      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a60      	ldr	r2, [pc, #384]	; (800232c <HAL_DMA_Abort_IT+0x3c8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d022      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5f      	ldr	r2, [pc, #380]	; (8002330 <HAL_DMA_Abort_IT+0x3cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d01d      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_DMA_Abort_IT+0x3d0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d018      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_DMA_Abort_IT+0x3d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_DMA_Abort_IT+0x3d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00e      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a59      	ldr	r2, [pc, #356]	; (8002340 <HAL_DMA_Abort_IT+0x3dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_DMA_Abort_IT+0x3e0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x290>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_DMA_Abort_IT+0x3e4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d108      	bne.n	8002206 <HAL_DMA_Abort_IT+0x2a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e007      	b.n	8002216 <HAL_DMA_Abort_IT+0x2b2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <HAL_DMA_Abort_IT+0x3a8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d072      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3a      	ldr	r2, [pc, #232]	; (8002310 <HAL_DMA_Abort_IT+0x3ac>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d06d      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a39      	ldr	r2, [pc, #228]	; (8002314 <HAL_DMA_Abort_IT+0x3b0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d068      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_DMA_Abort_IT+0x3b4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d063      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a36      	ldr	r2, [pc, #216]	; (800231c <HAL_DMA_Abort_IT+0x3b8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d05e      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_DMA_Abort_IT+0x3bc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d059      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <HAL_DMA_Abort_IT+0x3c0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d054      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a31      	ldr	r2, [pc, #196]	; (8002328 <HAL_DMA_Abort_IT+0x3c4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d04f      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_DMA_Abort_IT+0x3c8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04a      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2e      	ldr	r2, [pc, #184]	; (8002330 <HAL_DMA_Abort_IT+0x3cc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d045      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_DMA_Abort_IT+0x3d0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d040      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_DMA_Abort_IT+0x3d4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d03b      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_DMA_Abort_IT+0x3d8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d036      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_DMA_Abort_IT+0x3dc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_DMA_Abort_IT+0x3e0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d02c      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_DMA_Abort_IT+0x3e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d027      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_DMA_Abort_IT+0x3e8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_DMA_Abort_IT+0x3ec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_DMA_Abort_IT+0x3f0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <HAL_DMA_Abort_IT+0x3f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_DMA_Abort_IT+0x3f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_DMA_Abort_IT+0x3fc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_DMA_Abort_IT+0x400>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_Abort_IT+0x3a2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_DMA_Abort_IT+0x404>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d132      	bne.n	800236c <HAL_DMA_Abort_IT+0x408>
 8002306:	2301      	movs	r3, #1
 8002308:	e031      	b.n	800236e <HAL_DMA_Abort_IT+0x40a>
 800230a:	bf00      	nop
 800230c:	40020010 	.word	0x40020010
 8002310:	40020028 	.word	0x40020028
 8002314:	40020040 	.word	0x40020040
 8002318:	40020058 	.word	0x40020058
 800231c:	40020070 	.word	0x40020070
 8002320:	40020088 	.word	0x40020088
 8002324:	400200a0 	.word	0x400200a0
 8002328:	400200b8 	.word	0x400200b8
 800232c:	40020410 	.word	0x40020410
 8002330:	40020428 	.word	0x40020428
 8002334:	40020440 	.word	0x40020440
 8002338:	40020458 	.word	0x40020458
 800233c:	40020470 	.word	0x40020470
 8002340:	40020488 	.word	0x40020488
 8002344:	400204a0 	.word	0x400204a0
 8002348:	400204b8 	.word	0x400204b8
 800234c:	58025408 	.word	0x58025408
 8002350:	5802541c 	.word	0x5802541c
 8002354:	58025430 	.word	0x58025430
 8002358:	58025444 	.word	0x58025444
 800235c:	58025458 	.word	0x58025458
 8002360:	5802546c 	.word	0x5802546c
 8002364:	58025480 	.word	0x58025480
 8002368:	58025494 	.word	0x58025494
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d028      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00c      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_GPIO_Init+0x234>)
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002402:	e194      	b.n	800272e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8186 	beq.w	8002728 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x44>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d017      	beq.n	80024d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	69b9      	ldr	r1, [r7, #24]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80e0 	beq.w	8002728 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_GPIO_Init+0x238>)
 800256a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256e:	4a2e      	ldr	r2, [pc, #184]	; (8002628 <HAL_GPIO_Init+0x238>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_GPIO_Init+0x238>)
 800257a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a29      	ldr	r2, [pc, #164]	; (800262c <HAL_GPIO_Init+0x23c>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_GPIO_Init+0x240>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d052      	beq.n	8002658 <HAL_GPIO_Init+0x268>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_GPIO_Init+0x244>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_GPIO_Init+0x22e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_GPIO_Init+0x248>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_GPIO_Init+0x24c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_GPIO_Init+0x250>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_GPIO_Init+0x254>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_GPIO_Init+0x258>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_GPIO_Init+0x25c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_GPIO_Init+0x260>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_GPIO_Init+0x264>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x20e>
 80025fa:	2309      	movs	r3, #9
 80025fc:	e02d      	b.n	800265a <HAL_GPIO_Init+0x26a>
 80025fe:	230a      	movs	r3, #10
 8002600:	e02b      	b.n	800265a <HAL_GPIO_Init+0x26a>
 8002602:	2308      	movs	r3, #8
 8002604:	e029      	b.n	800265a <HAL_GPIO_Init+0x26a>
 8002606:	2307      	movs	r3, #7
 8002608:	e027      	b.n	800265a <HAL_GPIO_Init+0x26a>
 800260a:	2306      	movs	r3, #6
 800260c:	e025      	b.n	800265a <HAL_GPIO_Init+0x26a>
 800260e:	2305      	movs	r3, #5
 8002610:	e023      	b.n	800265a <HAL_GPIO_Init+0x26a>
 8002612:	2304      	movs	r3, #4
 8002614:	e021      	b.n	800265a <HAL_GPIO_Init+0x26a>
 8002616:	2303      	movs	r3, #3
 8002618:	e01f      	b.n	800265a <HAL_GPIO_Init+0x26a>
 800261a:	2302      	movs	r3, #2
 800261c:	e01d      	b.n	800265a <HAL_GPIO_Init+0x26a>
 800261e:	2301      	movs	r3, #1
 8002620:	e01b      	b.n	800265a <HAL_GPIO_Init+0x26a>
 8002622:	bf00      	nop
 8002624:	58000080 	.word	0x58000080
 8002628:	58024400 	.word	0x58024400
 800262c:	58000400 	.word	0x58000400
 8002630:	58020000 	.word	0x58020000
 8002634:	58020400 	.word	0x58020400
 8002638:	58020800 	.word	0x58020800
 800263c:	58020c00 	.word	0x58020c00
 8002640:	58021000 	.word	0x58021000
 8002644:	58021400 	.word	0x58021400
 8002648:	58021800 	.word	0x58021800
 800264c:	58021c00 	.word	0x58021c00
 8002650:	58022000 	.word	0x58022000
 8002654:	58022400 	.word	0x58022400
 8002658:	2300      	movs	r3, #0
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266a:	4938      	ldr	r1, [pc, #224]	; (800274c <HAL_GPIO_Init+0x35c>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800269e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f ae63 	bne.w	8002404 <HAL_GPIO_Init+0x14>
  }
}
 800273e:	bf00      	nop
 8002740:	bf00      	nop
 8002742:	3724      	adds	r7, #36	; 0x24
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	58000400 	.word	0x58000400

08002750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80027bc:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_HSEM_FastTake+0x2c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3320      	adds	r3, #32
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_HSEM_FastTake+0x30>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	58026400 	.word	0x58026400
 80027e4:	80000300 	.word	0x80000300

080027e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80027f2:	4906      	ldr	r1, [pc, #24]	; (800280c <HAL_HSEM_Release+0x24>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	58026400 	.word	0x58026400

08002810 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	2b06      	cmp	r3, #6
 8002822:	d00a      	beq.n	800283a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e040      	b.n	80028b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e03e      	b.n	80028b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002842:	491f      	ldr	r1, [pc, #124]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800284a:	f7fe ff21 	bl	8001690 <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002850:	e009      	b.n	8002866 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002852:	f7fe ff1d 	bl	8001690 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002860:	d901      	bls.n	8002866 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e028      	b.n	80028b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	d1ee      	bne.n	8002852 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b1e      	cmp	r3, #30
 8002878:	d008      	beq.n	800288c <HAL_PWREx_ConfigSupply+0x7c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b2e      	cmp	r3, #46	; 0x2e
 800287e:	d005      	beq.n	800288c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b1d      	cmp	r3, #29
 8002884:	d002      	beq.n	800288c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b2d      	cmp	r3, #45	; 0x2d
 800288a:	d114      	bne.n	80028b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800288c:	f7fe ff00 	bl	8001690 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002892:	e009      	b.n	80028a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002894:	f7fe fefc 	bl	8001690 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a2:	d901      	bls.n	80028a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e007      	b.n	80028b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d1ee      	bne.n	8002894 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024800 	.word	0x58024800

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f000 bc1d 	b.w	8003112 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8087 	beq.w	80029f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	4b99      	ldr	r3, [pc, #612]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028f0:	4b96      	ldr	r3, [pc, #600]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d007      	beq.n	800290c <HAL_RCC_OscConfig+0x48>
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2b18      	cmp	r3, #24
 8002900:	d110      	bne.n	8002924 <HAL_RCC_OscConfig+0x60>
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d06c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x12e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d168      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e3f6      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x78>
 800292e:	4b87      	ldr	r3, [pc, #540]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a86      	ldr	r2, [pc, #536]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e02e      	b.n	800299a <HAL_RCC_OscConfig+0xd6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10c      	bne.n	800295e <HAL_RCC_OscConfig+0x9a>
 8002944:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 800294a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a7d      	ldr	r2, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e01d      	b.n	800299a <HAL_RCC_OscConfig+0xd6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0xbe>
 8002968:	4b78      	ldr	r3, [pc, #480]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a77      	ldr	r2, [pc, #476]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 800296e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b75      	ldr	r3, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a74      	ldr	r2, [pc, #464]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0xd6>
 8002982:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a71      	ldr	r2, [pc, #452]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe75 	bl	8001690 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029aa:	f7fe fe71 	bl	8001690 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e3aa      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0xe6>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fe61 	bl	8001690 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d2:	f7fe fe5d 	bl	8001690 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e396      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x10e>
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80cb 	beq.w	8002b98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	4b52      	ldr	r3, [pc, #328]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_RCC_OscConfig+0x164>
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b18      	cmp	r3, #24
 8002a1c:	d156      	bne.n	8002acc <HAL_RCC_OscConfig+0x208>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d151      	bne.n	8002acc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a28:	4b48      	ldr	r3, [pc, #288]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_OscConfig+0x17c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e368      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a40:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 0219 	bic.w	r2, r3, #25
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	493f      	ldr	r1, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a52:	f7fe fe1d 	bl	8001690 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fe19 	bl	8001690 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e352      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	f7fe fe3a 	bl	80016f0 <HAL_GetREVID>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d817      	bhi.n	8002ab6 <HAL_RCC_OscConfig+0x1f2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1dc>
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a96:	4a2d      	ldr	r2, [pc, #180]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9e:	e07b      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	031b      	lsls	r3, r3, #12
 8002aae:	4927      	ldr	r1, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e070      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	4921      	ldr	r1, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aca:	e065      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d048      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 0219 	bic.w	r2, r3, #25
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	491a      	ldr	r1, [pc, #104]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fdd3 	bl	8001690 <HAL_GetTick>
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe fdcf 	bl	8001690 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e308      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	f7fe fdf0 	bl	80016f0 <HAL_GetREVID>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d81a      	bhi.n	8002b50 <HAL_RCC_OscConfig+0x28c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x270>
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	e031      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	4902      	ldr	r1, [pc, #8]	; (8002b4c <HAL_RCC_OscConfig+0x288>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e026      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	4b9a      	ldr	r3, [pc, #616]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4997      	ldr	r1, [pc, #604]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b95      	ldr	r3, [pc, #596]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a94      	ldr	r2, [pc, #592]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fd8d 	bl	8001690 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fd89 	bl	8001690 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e2c2      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b8c:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a9 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bb0:	4b82      	ldr	r3, [pc, #520]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_OscConfig+0x308>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b18      	cmp	r3, #24
 8002bc0:	d13a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x374>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d135      	bne.n	8002c38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bcc:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x320>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e296      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002be4:	f7fe fd84 	bl	80016f0 <HAL_GetREVID>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d817      	bhi.n	8002c22 <HAL_RCC_OscConfig+0x35e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x348>
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c0a:	e075      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0c:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	069b      	lsls	r3, r3, #26
 8002c1a:	4968      	ldr	r1, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c20:	e06a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c22:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	4962      	ldr	r1, [pc, #392]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c36:	e05f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d042      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fd20 	bl	8001690 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c54:	f7fe fd1c 	bl	8001690 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e255      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c72:	f7fe fd3d 	bl	80016f0 <HAL_GetREVID>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d817      	bhi.n	8002cb0 <HAL_RCC_OscConfig+0x3ec>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d108      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3d6>
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c90:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c96:	6053      	str	r3, [r2, #4]
 8002c98:	e02e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	069b      	lsls	r3, r3, #26
 8002ca8:	4944      	ldr	r1, [pc, #272]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
 8002cae:	e023      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	493f      	ldr	r1, [pc, #252]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
 8002cc4:	e018      	b.n	8002cf8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fcdd 	bl	8001690 <HAL_GetTick>
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cda:	f7fe fcd9 	bl	8001690 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e212      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d036      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d019      	beq.n	8002d40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fcba 	bl	8001690 <HAL_GetTick>
 8002d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fcb6 	bl	8001690 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1ef      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x45c>
 8002d3e:	e018      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fca0 	bl	8001690 <HAL_GetTick>
 8002d50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fc9c 	bl	8001690 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1d5      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d039      	beq.n	8002df2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fc7d 	bl	8001690 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d9a:	f7fe fc79 	bl	8001690 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1b2      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x4d6>
 8002db8:	e01b      	b.n	8002df2 <HAL_RCC_OscConfig+0x52e>
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dc0:	4b9b      	ldr	r3, [pc, #620]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a9a      	ldr	r2, [pc, #616]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fc60 	bl	8001690 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dd4:	f7fe fc5c 	bl	8001690 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e195      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de6:	4b92      	ldr	r3, [pc, #584]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8081 	beq.w	8002f02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e00:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <HAL_RCC_OscConfig+0x770>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a8b      	ldr	r2, [pc, #556]	; (8003034 <HAL_RCC_OscConfig+0x770>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fc40 	bl	8001690 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe fc3c 	bl	8001690 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e175      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e26:	4b83      	ldr	r3, [pc, #524]	; (8003034 <HAL_RCC_OscConfig+0x770>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x584>
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a7c      	ldr	r2, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	e02d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5e0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5a6>
 8002e50:	4b77      	ldr	r3, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a76      	ldr	r2, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	4b74      	ldr	r3, [pc, #464]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a73      	ldr	r2, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5e0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5c8>
 8002e72:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a6b      	ldr	r2, [pc, #428]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5e0>
 8002e8c:	4b68      	ldr	r3, [pc, #416]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a67      	ldr	r2, [pc, #412]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b65      	ldr	r3, [pc, #404]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a64      	ldr	r2, [pc, #400]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fbf0 	bl	8001690 <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fbec 	bl	8001690 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e123      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eca:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ee      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x5f0>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fbda 	bl	8001690 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fbd6 	bl	8001690 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e10d      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8102 	beq.w	8003110 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f14:	2b18      	cmp	r3, #24
 8002f16:	f000 80bd 	beq.w	8003094 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	f040 809e 	bne.w	8003060 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a41      	ldr	r2, [pc, #260]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fbae 	bl	8001690 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fbaa 	bl	8001690 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0e3      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f56:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x774>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4931      	ldr	r1, [pc, #196]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	3b01      	subs	r3, #1
 8002f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fa0:	4923      	ldr	r1, [pc, #140]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x778>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fbe:	00d2      	lsls	r2, r2, #3
 8002fc0:	491b      	ldr	r1, [pc, #108]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f023 020c 	bic.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4917      	ldr	r1, [pc, #92]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f023 0202 	bic.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	4912      	ldr	r1, [pc, #72]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4a10      	ldr	r2, [pc, #64]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_RCC_OscConfig+0x76c>)
 8003020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fb33 	bl	8001690 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302c:	e011      	b.n	8003052 <HAL_RCC_OscConfig+0x78e>
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400
 8003034:	58024800 	.word	0x58024800
 8003038:	fffffc0c 	.word	0xfffffc0c
 800303c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fb26 	bl	8001690 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e05f      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_RCC_OscConfig+0x858>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x77c>
 800305e:	e057      	b.n	8003110 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCC_OscConfig+0x858>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2d      	ldr	r2, [pc, #180]	; (800311c <HAL_RCC_OscConfig+0x858>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fb10 	bl	8001690 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fb0c 	bl	8001690 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e045      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_OscConfig+0x858>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x7b0>
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_OscConfig+0x858>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x858>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d031      	beq.n	800310c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d12a      	bne.n	800310c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d122      	bne.n	800310c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d111      	bne.n	800310c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0e1b      	lsrs	r3, r3, #24
 80030fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400

08003120 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e19c      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b8a      	ldr	r3, [pc, #552]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b87      	ldr	r3, [pc, #540]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	4985      	ldr	r1, [pc, #532]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e184      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800317c:	429a      	cmp	r2, r3
 800317e:	d908      	bls.n	8003192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003180:	4b78      	ldr	r3, [pc, #480]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	4975      	ldr	r1, [pc, #468]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d908      	bls.n	80031c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	496a      	ldr	r1, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d8:	429a      	cmp	r2, r3
 80031da:	d908      	bls.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031dc:	4b61      	ldr	r3, [pc, #388]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	495e      	ldr	r1, [pc, #376]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003206:	429a      	cmp	r2, r3
 8003208:	d908      	bls.n	800321c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800320a:	4b56      	ldr	r3, [pc, #344]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4953      	ldr	r1, [pc, #332]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003218:	4313      	orrs	r3, r2
 800321a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	429a      	cmp	r2, r3
 8003236:	d908      	bls.n	800324a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f023 020f 	bic.w	r2, r3, #15
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4947      	ldr	r1, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003246:	4313      	orrs	r3, r2
 8003248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d055      	beq.n	8003302 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4940      	ldr	r1, [pc, #256]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003264:	4313      	orrs	r3, r2
 8003266:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003270:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0f6      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0ea      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0de      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d6      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f023 0207 	bic.w	r2, r3, #7
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4925      	ldr	r1, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe f9dd 	bl	8001690 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fe f9d9 	bl	8001690 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0be      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	429a      	cmp	r2, r3
 8003300:	d1eb      	bne.n	80032da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d010      	beq.n	8003330 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	429a      	cmp	r2, r3
 800331c:	d208      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f023 020f 	bic.w	r2, r3, #15
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	490e      	ldr	r1, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800332c:	4313      	orrs	r3, r2
 800332e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d214      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 020f 	bic.w	r2, r3, #15
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e086      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
 8003360:	52002000 	.word	0x52002000
 8003364:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003380:	429a      	cmp	r2, r3
 8003382:	d208      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	4939      	ldr	r1, [pc, #228]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003392:	4313      	orrs	r3, r2
 8003394:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d208      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	492e      	ldr	r1, [pc, #184]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033dc:	429a      	cmp	r2, r3
 80033de:	d208      	bcs.n	80033f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4922      	ldr	r1, [pc, #136]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340a:	429a      	cmp	r2, r3
 800340c:	d208      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 800341c:	4313      	orrs	r3, r2
 800341e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003420:	f000 f834 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	4912      	ldr	r1, [pc, #72]	; (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x360>)
 8003456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x364>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x368>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe f8ca 	bl	80015fc <HAL_InitTick>
 8003468:	4603      	mov	r3, r0
 800346a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
 800347c:	08008110 	.word	0x08008110
 8003480:	24000004 	.word	0x24000004
 8003484:	24000000 	.word	0x24000000
 8003488:	24000008 	.word	0x24000008

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003492:	4bb3      	ldr	r3, [pc, #716]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	2b18      	cmp	r3, #24
 800349c:	f200 8155 	bhi.w	800374a <HAL_RCC_GetSysClockFreq+0x2be>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	0800350d 	.word	0x0800350d
 80034ac:	0800374b 	.word	0x0800374b
 80034b0:	0800374b 	.word	0x0800374b
 80034b4:	0800374b 	.word	0x0800374b
 80034b8:	0800374b 	.word	0x0800374b
 80034bc:	0800374b 	.word	0x0800374b
 80034c0:	0800374b 	.word	0x0800374b
 80034c4:	0800374b 	.word	0x0800374b
 80034c8:	08003533 	.word	0x08003533
 80034cc:	0800374b 	.word	0x0800374b
 80034d0:	0800374b 	.word	0x0800374b
 80034d4:	0800374b 	.word	0x0800374b
 80034d8:	0800374b 	.word	0x0800374b
 80034dc:	0800374b 	.word	0x0800374b
 80034e0:	0800374b 	.word	0x0800374b
 80034e4:	0800374b 	.word	0x0800374b
 80034e8:	08003539 	.word	0x08003539
 80034ec:	0800374b 	.word	0x0800374b
 80034f0:	0800374b 	.word	0x0800374b
 80034f4:	0800374b 	.word	0x0800374b
 80034f8:	0800374b 	.word	0x0800374b
 80034fc:	0800374b 	.word	0x0800374b
 8003500:	0800374b 	.word	0x0800374b
 8003504:	0800374b 	.word	0x0800374b
 8003508:	0800353f 	.word	0x0800353f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003518:	4b91      	ldr	r3, [pc, #580]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	4a90      	ldr	r2, [pc, #576]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
 8003528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800352a:	e111      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800352c:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800352e:	61bb      	str	r3, [r7, #24]
    break;
 8003530:	e10e      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003532:	4b8d      	ldr	r3, [pc, #564]	; (8003768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003534:	61bb      	str	r3, [r7, #24]
    break;
 8003536:	e10b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800353a:	61bb      	str	r3, [r7, #24]
    break;
 800353c:	e108      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800353e:	4b88      	ldr	r3, [pc, #544]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003548:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003552:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003554:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800355e:	4b80      	ldr	r3, [pc, #512]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80e1 	beq.w	8003744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b02      	cmp	r3, #2
 8003586:	f000 8083 	beq.w	8003690 <HAL_RCC_GetSysClockFreq+0x204>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b02      	cmp	r3, #2
 800358e:	f200 80a1 	bhi.w	80036d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x114>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d056      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x1c0>
 800359e:	e099      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a0:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02d      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035ac:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	4a6b      	ldr	r2, [pc, #428]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b62      	ldr	r3, [pc, #392]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003606:	e087      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362a:	ed97 6a02 	vldr	s12, [r7, #8]
 800362e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364a:	e065      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800365a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003672:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800368e:	e043      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800377c <HAL_RCC_GetSysClockFreq+0x2f0>
 800369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d2:	e021      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003716:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003722:	3301      	adds	r3, #1
 8003724:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003730:	edd7 6a07 	vldr	s13, [r7, #28]
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800373c:	ee17 3a90 	vmov	r3, s15
 8003740:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800374c:	61bb      	str	r3, [r7, #24]
    break;
 800374e:	bf00      	nop
  }

  return sysclockfreq;
 8003750:	69bb      	ldr	r3, [r7, #24]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
 8003764:	03d09000 	.word	0x03d09000
 8003768:	003d0900 	.word	0x003d0900
 800376c:	007a1200 	.word	0x007a1200
 8003770:	46000000 	.word	0x46000000
 8003774:	4c742400 	.word	0x4c742400
 8003778:	4a742400 	.word	0x4a742400
 800377c:	4af42400 	.word	0x4af42400

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003786:	f7ff fe81 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490f      	ldr	r1, [pc, #60]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80037bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	58024400 	.word	0x58024400
 80037d4:	08008110 	.word	0x08008110
 80037d8:	24000004 	.word	0x24000004
 80037dc:	24000000 	.word	0x24000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037e4:	f7ff ffcc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	58024400 	.word	0x58024400
 8003808:	08008110 	.word	0x08008110

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003810:	f7ff ffb6 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58024400 	.word	0x58024400
 8003834:	08008110 	.word	0x08008110

08003838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003844:	2300      	movs	r3, #0
 8003846:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	d02a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d018      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4ba3      	ldr	r3, [pc, #652]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4aa2      	ldr	r2, [pc, #648]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003888:	e015      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f9d5 	bl	8004c40 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fa7e 	bl	8004da4 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038bc:	4b93      	ldr	r3, [pc, #588]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	4990      	ldr	r1, [pc, #576]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	650b      	str	r3, [r1, #80]	; 0x50
 80038ce:	e001      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d826      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003905 	.word	0x08003905
 80038f4:	08003913 	.word	0x08003913
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393d 	.word	0x0800393d
 8003900:	0800393d 	.word	0x0800393d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4a80      	ldr	r2, [pc, #512]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003910:	e015      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f991 	bl	8004c40 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003922:	e00c      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f001 fa3a 	bl	8004da4 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003934:	e003      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
      break;
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800393c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003944:	4b71      	ldr	r3, [pc, #452]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	496e      	ldr	r1, [pc, #440]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	650b      	str	r3, [r1, #80]	; 0x50
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003964:	2b00      	cmp	r3, #0
 8003966:	d042      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003970:	d02b      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	d825      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003978:	2bc0      	cmp	r3, #192	; 0xc0
 800397a:	d028      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800397c:	2bc0      	cmp	r3, #192	; 0xc0
 800397e:	d821      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d016      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d81d      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d007      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003990:	e018      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800399e:	e017      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f94a 	bl	8004c40 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039b0:	e00e      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3324      	adds	r3, #36	; 0x24
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f9f3 	bl	8004da4 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039c2:	e005      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039d6:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	494a      	ldr	r1, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	650b      	str	r3, [r1, #80]	; 0x50
 80039e8:	e001      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d049      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a04:	d030      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a0a:	d82a      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a10:	d02c      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a16:	d824      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1c:	d018      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a22:	d81e      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2c:	d007      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a3c:	e017      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 f8fb 	bl	8004c40 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a4e:	e00e      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3324      	adds	r3, #36	; 0x24
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f9a4 	bl	8004da4 <RCCEx_PLL3_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a60:	e005      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
      break;
 8003a66:	e002      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a82:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	658b      	str	r3, [r1, #88]	; 0x58
 8003a88:	e001      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aaa:	d82a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab0:	d02e      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003abc:	d018      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d007      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003adc:	e019      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f8ab 	bl	8004c40 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aee:	e010      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f954 	bl	8004da4 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b00:	e007      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e004      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b0c:	58024400 	.word	0x58024400
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b18:	4b99      	ldr	r3, [pc, #612]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b26:	4996      	ldr	r1, [pc, #600]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b2c:	e001      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d032      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2b30      	cmp	r3, #48	; 0x30
 8003b44:	d01c      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b46:	2b30      	cmp	r3, #48	; 0x30
 8003b48:	d817      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d813      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d10f      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a88      	ldr	r2, [pc, #544]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b66:	e00e      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f866 	bl	8004c40 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b78:	e005      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b8c:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	4979      	ldr	r1, [pc, #484]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b9e:	e001      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d047      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb8:	d030      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bbe:	d82a      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bc4:	d02c      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bca:	d824      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd0:	d018      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd6:	d81e      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be0:	d007      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003be2:	e018      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bf0:	e017      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f821 	bl	8004c40 <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c02:	e00e      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3324      	adds	r3, #36	; 0x24
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f8ca 	bl	8004da4 <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c28:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	4952      	ldr	r1, [pc, #328]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	650b      	str	r3, [r1, #80]	; 0x50
 8003c3a:	e001      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d049      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d02e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5a:	d828      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c60:	d02a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c66:	d822      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c6c:	d026      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c72:	d81c      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c78:	d010      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7e:	d816      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d111      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 ffd5 	bl	8004c40 <RCCEx_PLL2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e012      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f87e 	bl	8004da4 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cb8:	bf00      	nop
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	492a      	ldr	r1, [pc, #168]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d04d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf6:	d02e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfc:	d828      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d02a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d822      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d0e:	d026      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d14:	d81c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d20:	d816      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01d      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff84 	bl	8004c40 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d3c:	e012      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3324      	adds	r3, #36	; 0x24
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f82d 	bl	8004da4 <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	e006      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d56:	bf00      	nop
 8003d58:	e004      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d78:	4901      	ldr	r1, [pc, #4]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d00e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da2:	d814      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dac:	d10f      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dae:	4baf      	ldr	r3, [pc, #700]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4aae      	ldr	r2, [pc, #696]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff3c 	bl	8004c40 <RCCEx_PLL2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ddc:	4ba3      	ldr	r3, [pc, #652]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	49a0      	ldr	r1, [pc, #640]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	650b      	str	r3, [r1, #80]	; 0x50
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d032      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d81b      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e47 	.word	0x08003e47
 8003e14:	08003e21 	.word	0x08003e21
 8003e18:	08003e2f 	.word	0x08003e2f
 8003e1c:	08003e47 	.word	0x08003e47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b92      	ldr	r3, [pc, #584]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a91      	ldr	r2, [pc, #580]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff03 	bl	8004c40 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e4e:	4b87      	ldr	r3, [pc, #540]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4984      	ldr	r1, [pc, #528]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e60:	e001      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8086 	beq.w	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7d      	ldr	r2, [pc, #500]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e80:	f7fd fc06 	bl	8001690 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e86:	e009      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fd fc02 	bl	8001690 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d902      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	75fb      	strb	r3, [r7, #23]
        break;
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e9c:	4b74      	ldr	r3, [pc, #464]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ef      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d166      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003eae:	4b6f      	ldr	r3, [pc, #444]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb8:	4053      	eors	r3, r2
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d013      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ecc:	4b67      	ldr	r3, [pc, #412]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a66      	ldr	r2, [pc, #408]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed8:	4b64      	ldr	r3, [pc, #400]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a63      	ldr	r2, [pc, #396]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ee4:	4a61      	ldr	r2, [pc, #388]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef4:	d115      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fd fbcb 	bl	8001690 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003efc:	e00b      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fbc7 	bl	8001690 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	75fb      	strb	r3, [r7, #23]
            break;
 8003f14:	e005      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f16:	4b55      	ldr	r3, [pc, #340]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0ed      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d126      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f46:	0919      	lsrs	r1, r3, #4
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	4947      	ldr	r1, [pc, #284]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	610b      	str	r3, [r1, #16]
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f54:	4b45      	ldr	r3, [pc, #276]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4a44      	ldr	r2, [pc, #272]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f5e:	6113      	str	r3, [r2, #16]
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6e:	493f      	ldr	r1, [pc, #252]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	670b      	str	r3, [r1, #112]	; 0x70
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	75bb      	strb	r3, [r7, #22]
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8085 	beq.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	2b28      	cmp	r3, #40	; 0x28
 8003f94:	d866      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08004079 	.word	0x08004079
 8003fa0:	08004065 	.word	0x08004065
 8003fa4:	08004065 	.word	0x08004065
 8003fa8:	08004065 	.word	0x08004065
 8003fac:	08004065 	.word	0x08004065
 8003fb0:	08004065 	.word	0x08004065
 8003fb4:	08004065 	.word	0x08004065
 8003fb8:	08004065 	.word	0x08004065
 8003fbc:	08004041 	.word	0x08004041
 8003fc0:	08004065 	.word	0x08004065
 8003fc4:	08004065 	.word	0x08004065
 8003fc8:	08004065 	.word	0x08004065
 8003fcc:	08004065 	.word	0x08004065
 8003fd0:	08004065 	.word	0x08004065
 8003fd4:	08004065 	.word	0x08004065
 8003fd8:	08004065 	.word	0x08004065
 8003fdc:	08004053 	.word	0x08004053
 8003fe0:	08004065 	.word	0x08004065
 8003fe4:	08004065 	.word	0x08004065
 8003fe8:	08004065 	.word	0x08004065
 8003fec:	08004065 	.word	0x08004065
 8003ff0:	08004065 	.word	0x08004065
 8003ff4:	08004065 	.word	0x08004065
 8003ff8:	08004065 	.word	0x08004065
 8003ffc:	08004079 	.word	0x08004079
 8004000:	08004065 	.word	0x08004065
 8004004:	08004065 	.word	0x08004065
 8004008:	08004065 	.word	0x08004065
 800400c:	08004065 	.word	0x08004065
 8004010:	08004065 	.word	0x08004065
 8004014:	08004065 	.word	0x08004065
 8004018:	08004065 	.word	0x08004065
 800401c:	08004079 	.word	0x08004079
 8004020:	08004065 	.word	0x08004065
 8004024:	08004065 	.word	0x08004065
 8004028:	08004065 	.word	0x08004065
 800402c:	08004065 	.word	0x08004065
 8004030:	08004065 	.word	0x08004065
 8004034:	08004065 	.word	0x08004065
 8004038:	08004065 	.word	0x08004065
 800403c:	08004079 	.word	0x08004079
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fdfa 	bl	8004c40 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004050:	e013      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fea3 	bl	8004da4 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004062:	e00a      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	e007      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
 8004070:	58024800 	.word	0x58024800
 8004074:	00ffffcf 	.word	0x00ffffcf
      break;
 8004078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004080:	4b96      	ldr	r3, [pc, #600]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408c:	4993      	ldr	r1, [pc, #588]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	654b      	str	r3, [r1, #84]	; 0x54
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d038      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d821      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040f7 	.word	0x080040f7
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040df 	.word	0x080040df
 80040c0:	080040f7 	.word	0x080040f7
 80040c4:	080040f7 	.word	0x080040f7
 80040c8:	080040f7 	.word	0x080040f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fdb4 	bl	8004c40 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040dc:	e00c      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	; 0x24
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe5d 	bl	8004da4 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040ee:	e003      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040fe:	4b77      	ldr	r3, [pc, #476]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f023 0207 	bic.w	r2, r3, #7
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	4974      	ldr	r1, [pc, #464]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	654b      	str	r3, [r1, #84]	; 0x54
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	2b05      	cmp	r3, #5
 800412a:	d821      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004177 	.word	0x08004177
 8004138:	0800414d 	.word	0x0800414d
 800413c:	0800415f 	.word	0x0800415f
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fd74 	bl	8004c40 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800415c:	e00c      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fe1d 	bl	8004da4 <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800416e:	e003      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	e000      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417e:	4b57      	ldr	r3, [pc, #348]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	4953      	ldr	r1, [pc, #332]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	658b      	str	r3, [r1, #88]	; 0x58
 8004192:	e001      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d04b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ae:	d02e      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b4:	d828      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d02a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d822      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c6:	d026      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041cc:	d81c      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d2:	d010      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80041d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d8:	d816      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01d      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80041de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e2:	d111      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fd28 	bl	8004c40 <RCCEx_PLL2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041f4:	e012      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3324      	adds	r3, #36	; 0x24
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fdd1 	bl	8004da4 <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004206:	e009      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	e006      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800420e:	bf00      	nop
 8004210:	e004      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004230:	492a      	ldr	r1, [pc, #168]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	654b      	str	r3, [r1, #84]	; 0x54
 8004236:	e001      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d04d      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d02e      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004258:	d828      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d02a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d822      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426a:	d026      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800426c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004270:	d81c      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d010      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	d816      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01d      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d111      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fcd6 	bl	8004c40 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004298:	e012      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3324      	adds	r3, #36	; 0x24
 800429e:	2102      	movs	r1, #2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fd7f 	bl	8004da4 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042b2:	bf00      	nop
 80042b4:	e004      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d4:	4901      	ldr	r1, [pc, #4]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	658b      	str	r3, [r1, #88]	; 0x58
 80042da:	e003      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d04b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042fa:	d02e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004300:	d828      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004306:	d02a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d822      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800430e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004312:	d026      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004314:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004318:	d81c      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d010      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004324:	d816      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01d      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432e:	d111      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc82 	bl	8004c40 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004340:	e012      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fd2b 	bl	8004da4 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004352:	e009      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800435a:	bf00      	nop
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800436e:	4b9d      	ldr	r3, [pc, #628]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800437c:	4999      	ldr	r1, [pc, #612]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800437e:	4313      	orrs	r3, r2
 8004380:	658b      	str	r3, [r1, #88]	; 0x58
 8004382:	e001      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d10a      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	2102      	movs	r1, #2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fcfc 	bl	8004da4 <RCCEx_PLL3_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043b6:	4b8b      	ldr	r3, [pc, #556]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c4:	4987      	ldr	r1, [pc, #540]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d10a      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3324      	adds	r3, #36	; 0x24
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fcdb 	bl	8004da4 <RCCEx_PLL3_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043f8:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	4977      	ldr	r1, [pc, #476]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004408:	4313      	orrs	r3, r2
 800440a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d034      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800441e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004422:	d01d      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004428:	d817      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d009      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004434:	e011      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fbff 	bl	8004c40 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	2102      	movs	r1, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fca8 	bl	8004da4 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
      break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004476:	495b      	ldr	r1, [pc, #364]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004478:	4313      	orrs	r3, r2
 800447a:	658b      	str	r3, [r1, #88]	; 0x58
 800447c:	e001      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d033      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004498:	d01c      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800449a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800449e:	d816      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a4:	d003      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80044a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044aa:	d007      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80044ac:	e00f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ae:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a4c      	ldr	r2, [pc, #304]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044ba:	e00c      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fc6e 	bl	8004da4 <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
      break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80044d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ea:	493e      	ldr	r1, [pc, #248]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	654b      	str	r3, [r1, #84]	; 0x54
 80044f0:	e001      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d029      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d007      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004510:	e00f      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	4a33      	ldr	r2, [pc, #204]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800451e:	e00b      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb8a 	bl	8004c40 <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
      break;
 8004536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	4926      	ldr	r1, [pc, #152]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800454c:	4313      	orrs	r3, r2
 800454e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004550:	e001      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3324      	adds	r3, #36	; 0x24
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fc1b 	bl	8004da4 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d033      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d017      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800458e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004592:	d811      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d013      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800459a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459e:	d80b      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a8:	d106      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045b6:	e007      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	e004      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045da:	4902      	ldr	r1, [pc, #8]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	654b      	str	r3, [r1, #84]	; 0x54
 80045e0:	e004      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	492e      	ldr	r1, [pc, #184]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004606:	4313      	orrs	r3, r2
 8004608:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004624:	4926      	ldr	r1, [pc, #152]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004626:	4313      	orrs	r3, r2
 8004628:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004642:	491f      	ldr	r1, [pc, #124]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004644:	4313      	orrs	r3, r2
 8004646:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800465e:	6113      	str	r3, [r2, #16]
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800466a:	4915      	ldr	r1, [pc, #84]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	da08      	bge.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004686:	4313      	orrs	r3, r2
 8004688:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046aa:	7dbb      	ldrb	r3, [r7, #22]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400

080046c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046c8:	f7ff f85a 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	58024400 	.word	0x58024400
 80046ec:	08008110 	.word	0x08008110

080046f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f8:	4ba1      	ldr	r3, [pc, #644]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004702:	4b9f      	ldr	r3, [pc, #636]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	0b1b      	lsrs	r3, r3, #12
 8004708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800470c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800470e:	4b9c      	ldr	r3, [pc, #624]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800471a:	4b99      	ldr	r3, [pc, #612]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8111 	beq.w	8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b02      	cmp	r3, #2
 8004742:	f000 8083 	beq.w	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b02      	cmp	r3, #2
 800474a:	f200 80a1 	bhi.w	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d056      	beq.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800475a:	e099      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800475c:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02d      	beq.n	80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004768:	4b85      	ldr	r3, [pc, #532]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	4a84      	ldr	r2, [pc, #528]	; (8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
 8004778:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047c2:	e087      	b.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800498c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004806:	e065      	b.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484a:	e043      	b.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800488e:	e021      	b.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80048d4:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fa:	ee17 2a90 	vmov	r2, s15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004928:	ee17 2a90 	vmov	r2, s15
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494a:	edd7 6a07 	vldr	s13, [r7, #28]
 800494e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004956:	ee17 2a90 	vmov	r2, s15
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	03d09000 	.word	0x03d09000
 8004988:	46000000 	.word	0x46000000
 800498c:	4c742400 	.word	0x4c742400
 8004990:	4a742400 	.word	0x4a742400
 8004994:	4af42400 	.word	0x4af42400

08004998 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049a0:	4ba1      	ldr	r3, [pc, #644]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80049aa:	4b9f      	ldr	r3, [pc, #636]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	0d1b      	lsrs	r3, r3, #20
 80049b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049b6:	4b9c      	ldr	r3, [pc, #624]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80049c2:	4b99      	ldr	r3, [pc, #612]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8111 	beq.w	8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f000 8083 	beq.w	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	f200 80a1 	bhi.w	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d056      	beq.n	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a02:	e099      	b.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a04:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02d      	beq.n	8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a10:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	4a84      	ldr	r2, [pc, #528]	; (8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a6a:	e087      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aae:	e065      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af2:	e043      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b48      	ldr	r3, [pc, #288]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b36:	e021      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b37      	ldr	r3, [pc, #220]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	0a5b      	lsrs	r3, r3, #9
 8004b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba2:	ee17 2a90 	vmov	r2, s15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004baa:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 2a90 	vmov	r2, s15
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfe:	ee17 2a90 	vmov	r2, s15
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c06:	e008      	b.n	8004c1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	03d09000 	.word	0x03d09000
 8004c30:	46000000 	.word	0x46000000
 8004c34:	4c742400 	.word	0x4c742400
 8004c38:	4a742400 	.word	0x4a742400
 8004c3c:	4af42400 	.word	0x4af42400

08004c40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c4e:	4b53      	ldr	r3, [pc, #332]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d101      	bne.n	8004c5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e099      	b.n	8004d92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c5e:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4e      	ldr	r2, [pc, #312]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fc fd11 	bl	8001690 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c70:	e008      	b.n	8004c84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c72:	f7fc fd0d 	bl	8001690 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e086      	b.n	8004d92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c84:	4b45      	ldr	r3, [pc, #276]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	031b      	lsls	r3, r3, #12
 8004c9e:	493f      	ldr	r1, [pc, #252]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	025b      	lsls	r3, r3, #9
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cd4:	4931      	ldr	r1, [pc, #196]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cda:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	492d      	ldr	r1, [pc, #180]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f023 0220 	bic.w	r2, r3, #32
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	4928      	ldr	r1, [pc, #160]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d04:	f023 0310 	bic.w	r3, r3, #16
 8004d08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <RCCEx_PLL2_Config+0x160>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	69d2      	ldr	r2, [r2, #28]
 8004d16:	00d2      	lsls	r2, r2, #3
 8004d18:	4920      	ldr	r1, [pc, #128]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	f043 0310 	orr.w	r3, r3, #16
 8004d28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d3c:	e00f      	b.n	8004d5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d50:	e005      	b.n	8004d5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fc fc91 	bl	8001690 <HAL_GetTick>
 8004d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d72:	f7fc fc8d 	bl	8001690 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e006      	b.n	8004d92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <RCCEx_PLL2_Config+0x15c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	ffff0007 	.word	0xffff0007

08004da4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004db2:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d101      	bne.n	8004dc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e099      	b.n	8004ef6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dc2:	4b4f      	ldr	r3, [pc, #316]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4e      	ldr	r2, [pc, #312]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dce:	f7fc fc5f 	bl	8001690 <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dd6:	f7fc fc5b 	bl	8001690 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e086      	b.n	8004ef6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f0      	bne.n	8004dd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	051b      	lsls	r3, r3, #20
 8004e02:	493f      	ldr	r1, [pc, #252]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	628b      	str	r3, [r1, #40]	; 0x28
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	025b      	lsls	r3, r3, #9
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e38:	4931      	ldr	r1, [pc, #196]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e3e:	4b30      	ldr	r3, [pc, #192]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	492d      	ldr	r1, [pc, #180]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	4928      	ldr	r1, [pc, #160]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e62:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <RCCEx_PLL3_Config+0x160>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	69d2      	ldr	r2, [r2, #28]
 8004e7a:	00d2      	lsls	r2, r2, #3
 8004e7c:	4920      	ldr	r1, [pc, #128]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ea0:	e00f      	b.n	8004ec2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d106      	bne.n	8004eb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eb4:	e005      	b.n	8004ec2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ece:	f7fc fbdf 	bl	8001690 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed4:	e008      	b.n	8004ee8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ed6:	f7fc fbdb 	bl	8001690 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e006      	b.n	8004ef6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
 8004f04:	ffff0007 	.word	0xffff0007

08004f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e042      	b.n	8004fa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fc f96d 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2224      	movs	r2, #36	; 0x24
 8004f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fc7e 	bl	800584c <UART_SetConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e022      	b.n	8004fa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 f9da 	bl	800631c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 fa61 	bl	8006460 <UART_CheckIdleState>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	f040 8083 	bne.w	80050ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_UART_Transmit+0x28>
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e07b      	b.n	80050cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Transmit+0x3a>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e074      	b.n	80050cc <HAL_UART_Transmit+0x124>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2221      	movs	r2, #33	; 0x21
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fb49 	bl	8001690 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d108      	bne.n	800502c <HAL_UART_Transmit+0x84>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e003      	b.n	8005034 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800503c:	e02c      	b.n	8005098 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f001 fa54 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e039      	b.n	80050cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3302      	adds	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e007      	b.n	8005086 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1cc      	bne.n	800503e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	2140      	movs	r1, #64	; 0x40
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 fa21 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e006      	b.n	80050cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b0ba      	sub	sp, #232	; 0xe8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005102:	4013      	ands	r3, r2
 8005104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11b      	bne.n	8005148 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800511c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 835a 	beq.w	80057f2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      }
      return;
 8005146:	e354      	b.n	80057f2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 811f 	beq.w	8005390 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005152:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005156:	4b8b      	ldr	r3, [pc, #556]	; (8005384 <HAL_UART_IRQHandler+0x2b0>)
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800515e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005162:	4b89      	ldr	r3, [pc, #548]	; (8005388 <HAL_UART_IRQHandler+0x2b4>)
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8112 	beq.w	8005390 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <HAL_UART_IRQHandler+0xc8>
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <HAL_UART_IRQHandler+0xf8>
 80051a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2202      	movs	r2, #2
 80051ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c2:	f043 0204 	orr.w	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_UART_IRQHandler+0x128>
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2204      	movs	r2, #4
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d017      	beq.n	8005238 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005214:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005218:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <HAL_UART_IRQHandler+0x2b0>)
 800521a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2208      	movs	r2, #8
 8005226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	f043 0208 	orr.w	r2, r3, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <HAL_UART_IRQHandler+0x196>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 82c0 	beq.w	80057f6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d013      	beq.n	80052aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800528e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d04f      	beq.n	800536e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 fb04 	bl	80068dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d141      	bne.n	8005366 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800530e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800531a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1d9      	bne.n	80052e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d013      	beq.n	800535e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <HAL_UART_IRQHandler+0x2b8>)
 800533c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005342:	4618      	mov	r0, r3
 8005344:	f7fc fe0e 	bl	8001f64 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005358:	4610      	mov	r0, r2
 800535a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00f      	b.n	800537e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa6a 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00b      	b.n	800537e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa66 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e007      	b.n	800537e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa62 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800537c:	e23b      	b.n	80057f6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537e:	bf00      	nop
    return;
 8005380:	e239      	b.n	80057f6 <HAL_UART_IRQHandler+0x722>
 8005382:	bf00      	nop
 8005384:	10000001 	.word	0x10000001
 8005388:	04000120 	.word	0x04000120
 800538c:	080069a9 	.word	0x080069a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 81ce 	bne.w	8005736 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 81c7 	beq.w	8005736 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 81c0 	beq.w	8005736 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2210      	movs	r2, #16
 80053bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	f040 813b 	bne.w	8005644 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a8b      	ldr	r2, [pc, #556]	; (8005604 <HAL_UART_IRQHandler+0x530>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d059      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a89      	ldr	r2, [pc, #548]	; (8005608 <HAL_UART_IRQHandler+0x534>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d053      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a87      	ldr	r2, [pc, #540]	; (800560c <HAL_UART_IRQHandler+0x538>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04d      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a85      	ldr	r2, [pc, #532]	; (8005610 <HAL_UART_IRQHandler+0x53c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d047      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a83      	ldr	r2, [pc, #524]	; (8005614 <HAL_UART_IRQHandler+0x540>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d041      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a81      	ldr	r2, [pc, #516]	; (8005618 <HAL_UART_IRQHandler+0x544>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d03b      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7f      	ldr	r2, [pc, #508]	; (800561c <HAL_UART_IRQHandler+0x548>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d035      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a7d      	ldr	r2, [pc, #500]	; (8005620 <HAL_UART_IRQHandler+0x54c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02f      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a7b      	ldr	r2, [pc, #492]	; (8005624 <HAL_UART_IRQHandler+0x550>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d029      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a79      	ldr	r2, [pc, #484]	; (8005628 <HAL_UART_IRQHandler+0x554>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d023      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a77      	ldr	r2, [pc, #476]	; (800562c <HAL_UART_IRQHandler+0x558>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01d      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a75      	ldr	r2, [pc, #468]	; (8005630 <HAL_UART_IRQHandler+0x55c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a73      	ldr	r2, [pc, #460]	; (8005634 <HAL_UART_IRQHandler+0x560>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d011      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a71      	ldr	r2, [pc, #452]	; (8005638 <HAL_UART_IRQHandler+0x564>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6f      	ldr	r2, [pc, #444]	; (800563c <HAL_UART_IRQHandler+0x568>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d005      	beq.n	800548e <HAL_UART_IRQHandler+0x3ba>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6d      	ldr	r2, [pc, #436]	; (8005640 <HAL_UART_IRQHandler+0x56c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d105      	bne.n	800549a <HAL_UART_IRQHandler+0x3c6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b29b      	uxth	r3, r3
 8005498:	e004      	b.n	80054a4 <HAL_UART_IRQHandler+0x3d0>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 81a4 	beq.w	80057fa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054bc:	429a      	cmp	r2, r3
 80054be:	f080 819c 	bcs.w	80057fa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	f000 8086 	beq.w	80055e6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005508:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800551c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1da      	bne.n	80054da <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005548:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800554c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005550:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800555a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e1      	bne.n	8005524 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3308      	adds	r3, #8
 8005566:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005584:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800558a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e3      	bne.n	8005560 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e4      	bne.n	80055a6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fc f9a1 	bl	8001928 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fa36 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005600:	e0fb      	b.n	80057fa <HAL_UART_IRQHandler+0x726>
 8005602:	bf00      	nop
 8005604:	40020010 	.word	0x40020010
 8005608:	40020028 	.word	0x40020028
 800560c:	40020040 	.word	0x40020040
 8005610:	40020058 	.word	0x40020058
 8005614:	40020070 	.word	0x40020070
 8005618:	40020088 	.word	0x40020088
 800561c:	400200a0 	.word	0x400200a0
 8005620:	400200b8 	.word	0x400200b8
 8005624:	40020410 	.word	0x40020410
 8005628:	40020428 	.word	0x40020428
 800562c:	40020440 	.word	0x40020440
 8005630:	40020458 	.word	0x40020458
 8005634:	40020470 	.word	0x40020470
 8005638:	40020488 	.word	0x40020488
 800563c:	400204a0 	.word	0x400204a0
 8005640:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005650:	b29b      	uxth	r3, r3
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80cc 	beq.w	80057fe <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8005666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80c7 	beq.w	80057fe <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005692:	647b      	str	r3, [r7, #68]	; 0x44
 8005694:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e4      	bne.n	8005670 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	623b      	str	r3, [r7, #32]
   return(result);
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	4b54      	ldr	r3, [pc, #336]	; (800580c <HAL_UART_IRQHandler+0x738>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056ca:	633a      	str	r2, [r7, #48]	; 0x30
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	617b      	str	r3, [r7, #20]
   return(result);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e4      	bne.n	80056f2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb f99c 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005734:	e063      	b.n	80057fe <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00e      	beq.n	8005760 <HAL_UART_IRQHandler+0x68c>
 8005742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fdc3 	bl	80072e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800575e:	e051      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d014      	beq.n	8005796 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03a      	beq.n	8005802 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
    }
    return;
 8005794:	e035      	b.n	8005802 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_UART_IRQHandler+0x6e2>
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 f910 	bl	80069d4 <UART_EndTransmit_IT>
    return;
 80057b4:	e026      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_UART_IRQHandler+0x702>
 80057c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fd9c 	bl	800730c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d4:	e016      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_UART_IRQHandler+0x730>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da0c      	bge.n	8005804 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fd84 	bl	80072f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057f0:	e008      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
      return;
 80057f2:	bf00      	nop
 80057f4:	e006      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
    return;
 80057f6:	bf00      	nop
 80057f8:	e004      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
      return;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
      return;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_UART_IRQHandler+0x730>
    return;
 8005802:	bf00      	nop
  }
}
 8005804:	37e8      	adds	r7, #232	; 0xe8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	effffffe 	.word	0xeffffffe

08005810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b092      	sub	sp, #72	; 0x48
 8005852:	af00      	add	r7, sp, #0
 8005854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	431a      	orrs	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4313      	orrs	r3, r2
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4bbe      	ldr	r3, [pc, #760]	; (8005b74 <UART_SetConfig+0x328>)
 800587c:	4013      	ands	r3, r2
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005884:	430b      	orrs	r3, r1
 8005886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4ab3      	ldr	r2, [pc, #716]	; (8005b78 <UART_SetConfig+0x32c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b4:	4313      	orrs	r3, r2
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	4baf      	ldr	r3, [pc, #700]	; (8005b7c <UART_SetConfig+0x330>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f023 010f 	bic.w	r1, r3, #15
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4aa6      	ldr	r2, [pc, #664]	; (8005b80 <UART_SetConfig+0x334>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d177      	bne.n	80059dc <UART_SetConfig+0x190>
 80058ec:	4ba5      	ldr	r3, [pc, #660]	; (8005b84 <UART_SetConfig+0x338>)
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f4:	2b28      	cmp	r3, #40	; 0x28
 80058f6:	d86d      	bhi.n	80059d4 <UART_SetConfig+0x188>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0xb4>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	080059a5 	.word	0x080059a5
 8005904:	080059d5 	.word	0x080059d5
 8005908:	080059d5 	.word	0x080059d5
 800590c:	080059d5 	.word	0x080059d5
 8005910:	080059d5 	.word	0x080059d5
 8005914:	080059d5 	.word	0x080059d5
 8005918:	080059d5 	.word	0x080059d5
 800591c:	080059d5 	.word	0x080059d5
 8005920:	080059ad 	.word	0x080059ad
 8005924:	080059d5 	.word	0x080059d5
 8005928:	080059d5 	.word	0x080059d5
 800592c:	080059d5 	.word	0x080059d5
 8005930:	080059d5 	.word	0x080059d5
 8005934:	080059d5 	.word	0x080059d5
 8005938:	080059d5 	.word	0x080059d5
 800593c:	080059d5 	.word	0x080059d5
 8005940:	080059b5 	.word	0x080059b5
 8005944:	080059d5 	.word	0x080059d5
 8005948:	080059d5 	.word	0x080059d5
 800594c:	080059d5 	.word	0x080059d5
 8005950:	080059d5 	.word	0x080059d5
 8005954:	080059d5 	.word	0x080059d5
 8005958:	080059d5 	.word	0x080059d5
 800595c:	080059d5 	.word	0x080059d5
 8005960:	080059bd 	.word	0x080059bd
 8005964:	080059d5 	.word	0x080059d5
 8005968:	080059d5 	.word	0x080059d5
 800596c:	080059d5 	.word	0x080059d5
 8005970:	080059d5 	.word	0x080059d5
 8005974:	080059d5 	.word	0x080059d5
 8005978:	080059d5 	.word	0x080059d5
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059c5 	.word	0x080059c5
 8005984:	080059d5 	.word	0x080059d5
 8005988:	080059d5 	.word	0x080059d5
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d5 	.word	0x080059d5
 8005994:	080059d5 	.word	0x080059d5
 8005998:	080059d5 	.word	0x080059d5
 800599c:	080059d5 	.word	0x080059d5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e222      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b2:	e21e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ba:	e21a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c2:	e216      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ca:	e212      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d2:	e20e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059da:	e20a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a69      	ldr	r2, [pc, #420]	; (8005b88 <UART_SetConfig+0x33c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d130      	bne.n	8005a48 <UART_SetConfig+0x1fc>
 80059e6:	4b67      	ldr	r3, [pc, #412]	; (8005b84 <UART_SetConfig+0x338>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d826      	bhi.n	8005a40 <UART_SetConfig+0x1f4>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0x1ac>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a11 	.word	0x08005a11
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a16:	e1ec      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1e:	e1e8      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e1e4      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2e:	e1e0      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a36:	e1dc      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3e:	e1d8      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e1d4      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a4f      	ldr	r2, [pc, #316]	; (8005b8c <UART_SetConfig+0x340>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d130      	bne.n	8005ab4 <UART_SetConfig+0x268>
 8005a52:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <UART_SetConfig+0x338>)
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d826      	bhi.n	8005aac <UART_SetConfig+0x260>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <UART_SetConfig+0x218>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a7d 	.word	0x08005a7d
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e1b6      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e1b2      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e1ae      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9a:	e1aa      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa2:	e1a6      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aaa:	e1a2      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab2:	e19e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <UART_SetConfig+0x344>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d130      	bne.n	8005b20 <UART_SetConfig+0x2d4>
 8005abe:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <UART_SetConfig+0x338>)
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d826      	bhi.n	8005b18 <UART_SetConfig+0x2cc>
 8005aca:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <UART_SetConfig+0x284>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae9 	.word	0x08005ae9
 8005ad4:	08005af1 	.word	0x08005af1
 8005ad8:	08005af9 	.word	0x08005af9
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b11 	.word	0x08005b11
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e180      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e17c      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e178      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e174      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b08:	2320      	movs	r3, #32
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e170      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e16c      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e168      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <UART_SetConfig+0x348>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d142      	bne.n	8005bb0 <UART_SetConfig+0x364>
 8005b2a:	4b16      	ldr	r3, [pc, #88]	; (8005b84 <UART_SetConfig+0x338>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d838      	bhi.n	8005ba8 <UART_SetConfig+0x35c>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0x2f0>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b5d 	.word	0x08005b5d
 8005b44:	08005b65 	.word	0x08005b65
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e14a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e146      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b64:	2308      	movs	r3, #8
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e142      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e13e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005b74:	cfff69f3 	.word	0xcfff69f3
 8005b78:	58000c00 	.word	0x58000c00
 8005b7c:	11fff4ff 	.word	0x11fff4ff
 8005b80:	40011000 	.word	0x40011000
 8005b84:	58024400 	.word	0x58024400
 8005b88:	40004400 	.word	0x40004400
 8005b8c:	40004800 	.word	0x40004800
 8005b90:	40004c00 	.word	0x40004c00
 8005b94:	40005000 	.word	0x40005000
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e128      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e124      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e120      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4acb      	ldr	r2, [pc, #812]	; (8005ee4 <UART_SetConfig+0x698>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d176      	bne.n	8005ca8 <UART_SetConfig+0x45c>
 8005bba:	4bcb      	ldr	r3, [pc, #812]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bc2:	2b28      	cmp	r3, #40	; 0x28
 8005bc4:	d86c      	bhi.n	8005ca0 <UART_SetConfig+0x454>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x380>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c71 	.word	0x08005c71
 8005bd0:	08005ca1 	.word	0x08005ca1
 8005bd4:	08005ca1 	.word	0x08005ca1
 8005bd8:	08005ca1 	.word	0x08005ca1
 8005bdc:	08005ca1 	.word	0x08005ca1
 8005be0:	08005ca1 	.word	0x08005ca1
 8005be4:	08005ca1 	.word	0x08005ca1
 8005be8:	08005ca1 	.word	0x08005ca1
 8005bec:	08005c79 	.word	0x08005c79
 8005bf0:	08005ca1 	.word	0x08005ca1
 8005bf4:	08005ca1 	.word	0x08005ca1
 8005bf8:	08005ca1 	.word	0x08005ca1
 8005bfc:	08005ca1 	.word	0x08005ca1
 8005c00:	08005ca1 	.word	0x08005ca1
 8005c04:	08005ca1 	.word	0x08005ca1
 8005c08:	08005ca1 	.word	0x08005ca1
 8005c0c:	08005c81 	.word	0x08005c81
 8005c10:	08005ca1 	.word	0x08005ca1
 8005c14:	08005ca1 	.word	0x08005ca1
 8005c18:	08005ca1 	.word	0x08005ca1
 8005c1c:	08005ca1 	.word	0x08005ca1
 8005c20:	08005ca1 	.word	0x08005ca1
 8005c24:	08005ca1 	.word	0x08005ca1
 8005c28:	08005ca1 	.word	0x08005ca1
 8005c2c:	08005c89 	.word	0x08005c89
 8005c30:	08005ca1 	.word	0x08005ca1
 8005c34:	08005ca1 	.word	0x08005ca1
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005ca1 	.word	0x08005ca1
 8005c40:	08005ca1 	.word	0x08005ca1
 8005c44:	08005ca1 	.word	0x08005ca1
 8005c48:	08005ca1 	.word	0x08005ca1
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005ca1 	.word	0x08005ca1
 8005c54:	08005ca1 	.word	0x08005ca1
 8005c58:	08005ca1 	.word	0x08005ca1
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005ca1 	.word	0x08005ca1
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005ca1 	.word	0x08005ca1
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e0bc      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e0b8      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e0b4      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e0b0      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e0ac      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e0a8      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e0a4      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a8f      	ldr	r2, [pc, #572]	; (8005eec <UART_SetConfig+0x6a0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d130      	bne.n	8005d14 <UART_SetConfig+0x4c8>
 8005cb2:	4b8d      	ldr	r3, [pc, #564]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d826      	bhi.n	8005d0c <UART_SetConfig+0x4c0>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x478>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e086      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e082      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e07e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e07a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e076      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e072      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e06e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a75      	ldr	r2, [pc, #468]	; (8005ef0 <UART_SetConfig+0x6a4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d130      	bne.n	8005d80 <UART_SetConfig+0x534>
 8005d1e:	4b72      	ldr	r3, [pc, #456]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d826      	bhi.n	8005d78 <UART_SetConfig+0x52c>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x4e4>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d59 	.word	0x08005d59
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e050      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e04c      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e048      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e044      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e040      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e03c      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e038      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5b      	ldr	r2, [pc, #364]	; (8005ef4 <UART_SetConfig+0x6a8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d130      	bne.n	8005dec <UART_SetConfig+0x5a0>
 8005d8a:	4b57      	ldr	r3, [pc, #348]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d826      	bhi.n	8005de4 <UART_SetConfig+0x598>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0x550>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e01a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e016      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e012      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e00e      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e00a      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e006      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e002      	b.n	8005df2 <UART_SetConfig+0x5a6>
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <UART_SetConfig+0x6a8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	f040 80f8 	bne.w	8005fee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	dc46      	bgt.n	8005e94 <UART_SetConfig+0x648>
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	f2c0 8082 	blt.w	8005f10 <UART_SetConfig+0x6c4>
 8005e0c:	3b02      	subs	r3, #2
 8005e0e:	2b1e      	cmp	r3, #30
 8005e10:	d87e      	bhi.n	8005f10 <UART_SetConfig+0x6c4>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0x5cc>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e9b 	.word	0x08005e9b
 8005e1c:	08005f11 	.word	0x08005f11
 8005e20:	08005ea3 	.word	0x08005ea3
 8005e24:	08005f11 	.word	0x08005f11
 8005e28:	08005f11 	.word	0x08005f11
 8005e2c:	08005f11 	.word	0x08005f11
 8005e30:	08005eb3 	.word	0x08005eb3
 8005e34:	08005f11 	.word	0x08005f11
 8005e38:	08005f11 	.word	0x08005f11
 8005e3c:	08005f11 	.word	0x08005f11
 8005e40:	08005f11 	.word	0x08005f11
 8005e44:	08005f11 	.word	0x08005f11
 8005e48:	08005f11 	.word	0x08005f11
 8005e4c:	08005f11 	.word	0x08005f11
 8005e50:	08005ec3 	.word	0x08005ec3
 8005e54:	08005f11 	.word	0x08005f11
 8005e58:	08005f11 	.word	0x08005f11
 8005e5c:	08005f11 	.word	0x08005f11
 8005e60:	08005f11 	.word	0x08005f11
 8005e64:	08005f11 	.word	0x08005f11
 8005e68:	08005f11 	.word	0x08005f11
 8005e6c:	08005f11 	.word	0x08005f11
 8005e70:	08005f11 	.word	0x08005f11
 8005e74:	08005f11 	.word	0x08005f11
 8005e78:	08005f11 	.word	0x08005f11
 8005e7c:	08005f11 	.word	0x08005f11
 8005e80:	08005f11 	.word	0x08005f11
 8005e84:	08005f11 	.word	0x08005f11
 8005e88:	08005f11 	.word	0x08005f11
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005f03 	.word	0x08005f03
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d037      	beq.n	8005f08 <UART_SetConfig+0x6bc>
 8005e98:	e03a      	b.n	8005f10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e9a:	f7fe fc13 	bl	80046c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ea0:	e03c      	b.n	8005f1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fc22 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb0:	e034      	b.n	8005f1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb2:	f107 0318 	add.w	r3, r7, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fd6e 	bl	8004998 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec0:	e02c      	b.n	8005f1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d016      	beq.n	8005efc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <UART_SetConfig+0x69c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	08db      	lsrs	r3, r3, #3
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <UART_SetConfig+0x6ac>)
 8005eda:	fa22 f303 	lsr.w	r3, r2, r3
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ee0:	e01c      	b.n	8005f1c <UART_SetConfig+0x6d0>
 8005ee2:	bf00      	nop
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	40007800 	.word	0x40007800
 8005ef0:	40007c00 	.word	0x40007c00
 8005ef4:	58000c00 	.word	0x58000c00
 8005ef8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005efc:	4b9d      	ldr	r3, [pc, #628]	; (8006174 <UART_SetConfig+0x928>)
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f00:	e00c      	b.n	8005f1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f02:	4b9d      	ldr	r3, [pc, #628]	; (8006178 <UART_SetConfig+0x92c>)
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f06:	e009      	b.n	8005f1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f0e:	e005      	b.n	8005f1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 81de 	beq.w	80062e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4a94      	ldr	r2, [pc, #592]	; (800617c <UART_SetConfig+0x930>)
 8005f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d305      	bcc.n	8005f54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f5a:	e1c1      	b.n	80062e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	2200      	movs	r2, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	60fa      	str	r2, [r7, #12]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	4a84      	ldr	r2, [pc, #528]	; (800617c <UART_SetConfig+0x930>)
 8005f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2200      	movs	r2, #0
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f7e:	f7fa fa07 	bl	8000390 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	020b      	lsls	r3, r1, #8
 8005f94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f98:	0202      	lsls	r2, r0, #8
 8005f9a:	6979      	ldr	r1, [r7, #20]
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	0849      	lsrs	r1, r1, #1
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	eb12 0804 	adds.w	r8, r2, r4
 8005faa:	eb43 0905 	adc.w	r9, r3, r5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	469a      	mov	sl, r3
 8005fb6:	4693      	mov	fp, r2
 8005fb8:	4652      	mov	r2, sl
 8005fba:	465b      	mov	r3, fp
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa f9e6 	bl	8000390 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd2:	d308      	bcc.n	8005fe6 <UART_SetConfig+0x79a>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fda:	d204      	bcs.n	8005fe6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e17c      	b.n	80062e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005fec:	e178      	b.n	80062e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff6:	f040 80c5 	bne.w	8006184 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	dc48      	bgt.n	8006094 <UART_SetConfig+0x848>
 8006002:	2b00      	cmp	r3, #0
 8006004:	db7b      	blt.n	80060fe <UART_SetConfig+0x8b2>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d879      	bhi.n	80060fe <UART_SetConfig+0x8b2>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <UART_SetConfig+0x7c4>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	0800609b 	.word	0x0800609b
 8006014:	080060a3 	.word	0x080060a3
 8006018:	080060ff 	.word	0x080060ff
 800601c:	080060ff 	.word	0x080060ff
 8006020:	080060ab 	.word	0x080060ab
 8006024:	080060ff 	.word	0x080060ff
 8006028:	080060ff 	.word	0x080060ff
 800602c:	080060ff 	.word	0x080060ff
 8006030:	080060bb 	.word	0x080060bb
 8006034:	080060ff 	.word	0x080060ff
 8006038:	080060ff 	.word	0x080060ff
 800603c:	080060ff 	.word	0x080060ff
 8006040:	080060ff 	.word	0x080060ff
 8006044:	080060ff 	.word	0x080060ff
 8006048:	080060ff 	.word	0x080060ff
 800604c:	080060ff 	.word	0x080060ff
 8006050:	080060cb 	.word	0x080060cb
 8006054:	080060ff 	.word	0x080060ff
 8006058:	080060ff 	.word	0x080060ff
 800605c:	080060ff 	.word	0x080060ff
 8006060:	080060ff 	.word	0x080060ff
 8006064:	080060ff 	.word	0x080060ff
 8006068:	080060ff 	.word	0x080060ff
 800606c:	080060ff 	.word	0x080060ff
 8006070:	080060ff 	.word	0x080060ff
 8006074:	080060ff 	.word	0x080060ff
 8006078:	080060ff 	.word	0x080060ff
 800607c:	080060ff 	.word	0x080060ff
 8006080:	080060ff 	.word	0x080060ff
 8006084:	080060ff 	.word	0x080060ff
 8006088:	080060ff 	.word	0x080060ff
 800608c:	080060ff 	.word	0x080060ff
 8006090:	080060f1 	.word	0x080060f1
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d02e      	beq.n	80060f6 <UART_SetConfig+0x8aa>
 8006098:	e031      	b.n	80060fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609a:	f7fd fba1 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 800609e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060a0:	e033      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a2:	f7fd fbb3 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80060a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060a8:	e02f      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fb1e 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b8:	e027      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ba:	f107 0318 	add.w	r3, r7, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fc6a 	bl	8004998 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060c8:	e01f      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <UART_SetConfig+0x934>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060d6:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <UART_SetConfig+0x934>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	08db      	lsrs	r3, r3, #3
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <UART_SetConfig+0x928>)
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060e8:	e00f      	b.n	800610a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <UART_SetConfig+0x928>)
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ee:	e00c      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <UART_SetConfig+0x92c>)
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f4:	e009      	b.n	800610a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fc:	e005      	b.n	800610a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80e7 	beq.w	80062e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	4a19      	ldr	r2, [pc, #100]	; (800617c <UART_SetConfig+0x930>)
 8006118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800611c:	461a      	mov	r2, r3
 800611e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006120:	fbb3 f3f2 	udiv	r3, r3, r2
 8006124:	005a      	lsls	r2, r3, #1
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	441a      	add	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b0f      	cmp	r3, #15
 800613c:	d916      	bls.n	800616c <UART_SetConfig+0x920>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006144:	d212      	bcs.n	800616c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	b29b      	uxth	r3, r3
 800614a:	f023 030f 	bic.w	r3, r3, #15
 800614e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	b29b      	uxth	r3, r3
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	b29a      	uxth	r2, r3
 800615c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800615e:	4313      	orrs	r3, r2
 8006160:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	e0b9      	b.n	80062e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006172:	e0b5      	b.n	80062e0 <UART_SetConfig+0xa94>
 8006174:	03d09000 	.word	0x03d09000
 8006178:	003d0900 	.word	0x003d0900
 800617c:	08008120 	.word	0x08008120
 8006180:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006184:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006188:	2b20      	cmp	r3, #32
 800618a:	dc49      	bgt.n	8006220 <UART_SetConfig+0x9d4>
 800618c:	2b00      	cmp	r3, #0
 800618e:	db7c      	blt.n	800628a <UART_SetConfig+0xa3e>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d87a      	bhi.n	800628a <UART_SetConfig+0xa3e>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0x950>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	08006227 	.word	0x08006227
 80061a0:	0800622f 	.word	0x0800622f
 80061a4:	0800628b 	.word	0x0800628b
 80061a8:	0800628b 	.word	0x0800628b
 80061ac:	08006237 	.word	0x08006237
 80061b0:	0800628b 	.word	0x0800628b
 80061b4:	0800628b 	.word	0x0800628b
 80061b8:	0800628b 	.word	0x0800628b
 80061bc:	08006247 	.word	0x08006247
 80061c0:	0800628b 	.word	0x0800628b
 80061c4:	0800628b 	.word	0x0800628b
 80061c8:	0800628b 	.word	0x0800628b
 80061cc:	0800628b 	.word	0x0800628b
 80061d0:	0800628b 	.word	0x0800628b
 80061d4:	0800628b 	.word	0x0800628b
 80061d8:	0800628b 	.word	0x0800628b
 80061dc:	08006257 	.word	0x08006257
 80061e0:	0800628b 	.word	0x0800628b
 80061e4:	0800628b 	.word	0x0800628b
 80061e8:	0800628b 	.word	0x0800628b
 80061ec:	0800628b 	.word	0x0800628b
 80061f0:	0800628b 	.word	0x0800628b
 80061f4:	0800628b 	.word	0x0800628b
 80061f8:	0800628b 	.word	0x0800628b
 80061fc:	0800628b 	.word	0x0800628b
 8006200:	0800628b 	.word	0x0800628b
 8006204:	0800628b 	.word	0x0800628b
 8006208:	0800628b 	.word	0x0800628b
 800620c:	0800628b 	.word	0x0800628b
 8006210:	0800628b 	.word	0x0800628b
 8006214:	0800628b 	.word	0x0800628b
 8006218:	0800628b 	.word	0x0800628b
 800621c:	0800627d 	.word	0x0800627d
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d02e      	beq.n	8006282 <UART_SetConfig+0xa36>
 8006224:	e031      	b.n	800628a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006226:	f7fd fadb 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 800622a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800622c:	e033      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800622e:	f7fd faed 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8006232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006234:	e02f      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fa58 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006244:	e027      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006246:	f107 0318 	add.w	r3, r7, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fba4 	bl	8004998 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006254:	e01f      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006256:	4b2d      	ldr	r3, [pc, #180]	; (800630c <UART_SetConfig+0xac0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006262:	4b2a      	ldr	r3, [pc, #168]	; (800630c <UART_SetConfig+0xac0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <UART_SetConfig+0xac4>)
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006274:	e00f      	b.n	8006296 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <UART_SetConfig+0xac4>)
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627a:	e00c      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800627c:	4b25      	ldr	r3, [pc, #148]	; (8006314 <UART_SetConfig+0xac8>)
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006280:	e009      	b.n	8006296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006288:	e005      	b.n	8006296 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006294:	bf00      	nop
    }

    if (pclk != 0U)
 8006296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d021      	beq.n	80062e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <UART_SetConfig+0xacc>)
 80062a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	441a      	add	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	2b0f      	cmp	r3, #15
 80062c4:	d909      	bls.n	80062da <UART_SetConfig+0xa8e>
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d205      	bcs.n	80062da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60da      	str	r2, [r3, #12]
 80062d8:	e002      	b.n	80062e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2200      	movs	r2, #0
 80062fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80062fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006300:	4618      	mov	r0, r3
 8006302:	3748      	adds	r7, #72	; 0x48
 8006304:	46bd      	mov	sp, r7
 8006306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	003d0900 	.word	0x003d0900
 8006318:	08008120 	.word	0x08008120

0800631c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01a      	beq.n	8006432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641a:	d10a      	bne.n	8006432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006470:	f7fb f90e 	bl	8001690 <HAL_GetTick>
 8006474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b08      	cmp	r3, #8
 8006482:	d10e      	bne.n	80064a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f82f 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e025      	b.n	80064ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d10e      	bne.n	80064ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f819 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e00f      	b.n	80064ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b09c      	sub	sp, #112	; 0x70
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006506:	e0a9      	b.n	800665c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	f000 80a5 	beq.w	800665c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fb f8bd 	bl	8001690 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <UART_WaitOnFlagUntilTimeout+0x32>
 8006522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006524:	2b00      	cmp	r3, #0
 8006526:	d140      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800653c:	667b      	str	r3, [r7, #100]	; 0x64
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006548:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800654c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	663b      	str	r3, [r7, #96]	; 0x60
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800657a:	64ba      	str	r2, [r7, #72]	; 0x48
 800657c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e069      	b.n	800667e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d051      	beq.n	800665c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d149      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
 80065f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e6      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	613b      	str	r3, [r7, #16]
   return(result);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 0301 	bic.w	r3, r3, #1
 800661a:	66bb      	str	r3, [r7, #104]	; 0x68
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006624:	623a      	str	r2, [r7, #32]
 8006626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	61bb      	str	r3, [r7, #24]
   return(result);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e5      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e010      	b.n	800667e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	429a      	cmp	r2, r3
 8006678:	f43f af46 	beq.w	8006508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3770      	adds	r7, #112	; 0x70
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006688:	b480      	push	{r7}
 800668a:	b0a3      	sub	sp, #140	; 0x8c
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	d10e      	bne.n	80066da <UART_Start_Receive_IT+0x52>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <UART_Start_Receive_IT+0x48>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066ce:	e02d      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066d8:	e028      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10d      	bne.n	80066fe <UART_Start_Receive_IT+0x76>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <UART_Start_Receive_IT+0x6c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22ff      	movs	r2, #255	; 0xff
 80066ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066f2:	e01b      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	227f      	movs	r2, #127	; 0x7f
 80066f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066fc:	e016      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006706:	d10d      	bne.n	8006724 <UART_Start_Receive_IT+0x9c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <UART_Start_Receive_IT+0x92>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	227f      	movs	r2, #127	; 0x7f
 8006714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006718:	e008      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	223f      	movs	r2, #63	; 0x3f
 800671e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006722:	e003      	b.n	800672c <UART_Start_Receive_IT+0xa4>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2222      	movs	r2, #34	; 0x22
 8006738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800674c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006760:	673a      	str	r2, [r7, #112]	; 0x70
 8006762:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006766:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800676e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e3      	bne.n	800673c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677c:	d153      	bne.n	8006826 <UART_Start_Receive_IT+0x19e>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	429a      	cmp	r2, r3
 8006788:	d34d      	bcc.n	8006826 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d107      	bne.n	80067a4 <UART_Start_Receive_IT+0x11c>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a4b      	ldr	r2, [pc, #300]	; (80068cc <UART_Start_Receive_IT+0x244>)
 80067a0:	671a      	str	r2, [r3, #112]	; 0x70
 80067a2:	e002      	b.n	80067aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a4a      	ldr	r2, [pc, #296]	; (80068d0 <UART_Start_Receive_IT+0x248>)
 80067a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01a      	beq.n	80067f0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e4      	bne.n	80067ba <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006806:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006810:	64ba      	str	r2, [r7, #72]	; 0x48
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e5      	bne.n	80067f0 <UART_Start_Receive_IT+0x168>
 8006824:	e04a      	b.n	80068bc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d107      	bne.n	8006840 <UART_Start_Receive_IT+0x1b8>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a26      	ldr	r2, [pc, #152]	; (80068d4 <UART_Start_Receive_IT+0x24c>)
 800683c:	671a      	str	r2, [r3, #112]	; 0x70
 800683e:	e002      	b.n	8006846 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <UART_Start_Receive_IT+0x250>)
 8006844:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d019      	beq.n	800688a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800686a:	677b      	str	r3, [r7, #116]	; 0x74
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
 8006876:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_Start_Receive_IT+0x1ce>
 8006888:	e018      	b.n	80068bc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f043 0320 	orr.w	r3, r3, #32
 800689e:	67bb      	str	r3, [r7, #120]	; 0x78
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	378c      	adds	r7, #140	; 0x8c
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	08006fe5 	.word	0x08006fe5
 80068d0:	08006ced 	.word	0x08006ced
 80068d4:	08006b8b 	.word	0x08006b8b
 80068d8:	08006a2b 	.word	0x08006a2b

080068dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b095      	sub	sp, #84	; 0x54
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	643b      	str	r3, [r7, #64]	; 0x40
 8006904:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e6      	bne.n	80068e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	61fb      	str	r3, [r7, #28]
   return(result);
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <UART_EndRxTransfer+0xc8>)
 800692a:	4013      	ands	r3, r2
 800692c:	64bb      	str	r3, [r7, #72]	; 0x48
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800693c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e5      	bne.n	8006916 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d118      	bne.n	8006984 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	647b      	str	r3, [r7, #68]	; 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	613b      	str	r3, [r7, #16]
   return(result);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e6      	bne.n	8006952 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006998:	bf00      	nop
 800699a:	3754      	adds	r7, #84	; 0x54
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	effffffe 	.word	0xeffffffe

080069a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7fe ff36 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fe fef7 	bl	8005810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a22:	bf00      	nop
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b096      	sub	sp, #88	; 0x58
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	2b22      	cmp	r3, #34	; 0x22
 8006a44:	f040 8095 	bne.w	8006b72 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a56:	b2d9      	uxtb	r1, r3
 8006a58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	400a      	ands	r2, r1
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d178      	bne.n	8006b82 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d12e      	bne.n	8006b6a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d103      	bne.n	8006b5a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2210      	movs	r2, #16
 8006b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7f9 ff82 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b68:	e00b      	b.n	8006b82 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe fe5a 	bl	8005824 <HAL_UART_RxCpltCallback>
}
 8006b70:	e007      	b.n	8006b82 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0208 	orr.w	r2, r2, #8
 8006b80:	619a      	str	r2, [r3, #24]
}
 8006b82:	bf00      	nop
 8006b84:	3758      	adds	r7, #88	; 0x58
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b096      	sub	sp, #88	; 0x58
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba2:	2b22      	cmp	r3, #34	; 0x22
 8006ba4:	f040 8095 	bne.w	8006cd2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bb8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006bbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	1c9a      	adds	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d178      	bne.n	8006ce2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e6      	bne.n	8006bf0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e5      	bne.n	8006c22 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d12e      	bne.n	8006cca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f023 0310 	bic.w	r3, r3, #16
 8006c86:	647b      	str	r3, [r7, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6979      	ldr	r1, [r7, #20]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e6      	bne.n	8006c72 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d103      	bne.n	8006cba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7f9 fed2 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cc8:	e00b      	b.n	8006ce2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fe fdaa 	bl	8005824 <HAL_UART_RxCpltCallback>
}
 8006cd0:	e007      	b.n	8006ce2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0208 	orr.w	r2, r2, #8
 8006ce0:	619a      	str	r2, [r3, #24]
}
 8006ce2:	bf00      	nop
 8006ce4:	3758      	adds	r7, #88	; 0x58
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b0a6      	sub	sp, #152	; 0x98
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cfa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d22:	2b22      	cmp	r3, #34	; 0x22
 8006d24:	f040 814d 	bne.w	8006fc2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d32:	e0f4      	b.n	8006f1e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d3e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006d42:	b2d9      	uxtb	r1, r3
 8006d44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	400a      	ands	r2, r1
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d053      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2201      	movs	r2, #1
 8006da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d011      	beq.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ddc:	f043 0204 	orr.w	r2, r3, #4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2204      	movs	r2, #4
 8006e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0c:	f043 0202 	orr.w	r2, r3, #2
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fe fd09 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d171      	bne.n	8006f1e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e5e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e4      	bne.n	8006e3a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e82:	4b56      	ldr	r3, [pc, #344]	; (8006fdc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e90:	657a      	str	r2, [r7, #84]	; 0x54
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d12e      	bne.n	8006f18 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f023 0310 	bic.w	r3, r3, #16
 8006ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d103      	bne.n	8006f08 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2210      	movs	r2, #16
 8006f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7f9 fdab 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
 8006f16:	e002      	b.n	8006f1e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe fc83 	bl	8005824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <UART_RxISR_8BIT_FIFOEN+0x248>
 8006f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f47f af00 	bne.w	8006d34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f3e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d045      	beq.n	8006fd2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d23e      	bcs.n	8006fd2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006f8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f043 0320 	orr.w	r3, r3, #32
 8006fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6979      	ldr	r1, [r7, #20]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fc0:	e007      	b.n	8006fd2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0208 	orr.w	r2, r2, #8
 8006fd0:	619a      	str	r2, [r3, #24]
}
 8006fd2:	bf00      	nop
 8006fd4:	3798      	adds	r7, #152	; 0x98
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	effffffe 	.word	0xeffffffe
 8006fe0:	08006a2b 	.word	0x08006a2b

08006fe4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b0a8      	sub	sp, #160	; 0xa0
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ff2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701a:	2b22      	cmp	r3, #34	; 0x22
 800701c:	f040 8151 	bne.w	80072c2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007026:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800702a:	e0f8      	b.n	800721e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800703e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007042:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007046:	4013      	ands	r3, r2
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800704e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	1c9a      	adds	r2, r3, #2
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	2b00      	cmp	r3, #0
 8007080:	d053      	beq.n	800712a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d011      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800708e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80070be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2202      	movs	r2, #2
 80070d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d8:	f043 0204 	orr.w	r2, r3, #4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d011      	beq.n	8007112 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80070ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2204      	movs	r2, #4
 8007100:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007108:	f043 0202 	orr.w	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fe fb8b 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d173      	bne.n	800721e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800714a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800715a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800715e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e4      	bne.n	8007136 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800717c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800717e:	4b57      	ldr	r3, [pc, #348]	; (80072dc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8007180:	4013      	ands	r3, r2
 8007182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007190:	65ba      	str	r2, [r7, #88]	; 0x58
 8007192:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e3      	bne.n	800716c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d12e      	bne.n	8007218 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	f023 0310 	bic.w	r3, r3, #16
 80071d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
 80071e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e6      	bne.n	80071c0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d103      	bne.n	8007208 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2210      	movs	r2, #16
 8007206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7f9 fc2b 	bl	8000a6c <HAL_UARTEx_RxEventCallback>
 8007216:	e002      	b.n	800721e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7fe fb03 	bl	8005824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800721e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007222:	2b00      	cmp	r3, #0
 8007224:	d006      	beq.n	8007234 <UART_RxISR_16BIT_FIFOEN+0x250>
 8007226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f aefc 	bne.w	800702c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800723a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800723e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007242:	2b00      	cmp	r3, #0
 8007244:	d045      	beq.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800724c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007250:	429a      	cmp	r2, r3
 8007252:	d23e      	bcs.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	623b      	str	r3, [r7, #32]
   return(result);
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800726a:	677b      	str	r3, [r7, #116]	; 0x74
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007274:	633a      	str	r2, [r7, #48]	; 0x30
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800727a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e5      	bne.n	8007254 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800728c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60fb      	str	r3, [r7, #12]
   return(result);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f043 0320 	orr.w	r3, r3, #32
 80072a2:	673b      	str	r3, [r7, #112]	; 0x70
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	69b9      	ldr	r1, [r7, #24]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e6      	bne.n	800728e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072c0:	e007      	b.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0208 	orr.w	r2, r2, #8
 80072d0:	619a      	str	r2, [r3, #24]
}
 80072d2:	bf00      	nop
 80072d4:	37a0      	adds	r7, #160	; 0xa0
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	effffffe 	.word	0xeffffffe
 80072e0:	08006b8b 	.word	0x08006b8b

080072e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UARTEx_DisableFifoMode+0x16>
 8007332:	2302      	movs	r3, #2
 8007334:	e027      	b.n	8007386 <HAL_UARTEx_DisableFifoMode+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2224      	movs	r2, #36	; 0x24
 8007342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e02d      	b.n	8007406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2224      	movs	r2, #36	; 0x24
 80073b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8ac 	bl	8007544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007422:	2302      	movs	r3, #2
 8007424:	e02d      	b.n	8007482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2224      	movs	r2, #36	; 0x24
 8007432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f86e 	bl	8007544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b08c      	sub	sp, #48	; 0x30
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	4613      	mov	r3, r2
 8007496:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d14a      	bne.n	8007538 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e043      	b.n	800753a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
    }

    __HAL_LOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_UARTEx_ReceiveToIdle_IT+0x36>
 80074bc:	2302      	movs	r3, #2
 80074be:	e03c      	b.n	800753a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	461a      	mov	r2, r3
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff f8d7 	bl	8006688 <UART_Start_Receive_IT>
 80074da:	4603      	mov	r3, r0
 80074dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80074e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d124      	bne.n	8007532 <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d11d      	bne.n	800752c <HAL_UARTEx_ReceiveToIdle_IT+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2210      	movs	r2, #16
 80074f6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	617b      	str	r3, [r7, #20]
   return(result);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f043 0310 	orr.w	r3, r3, #16
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
 8007518:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6a39      	ldr	r1, [r7, #32]
 800751c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	61fb      	str	r3, [r7, #28]
   return(result);
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e6      	bne.n	80074f8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800752a:	e002      	b.n	8007532 <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007536:	e000      	b.n	800753a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007538:	2302      	movs	r3, #2
  }
}
 800753a:	4618      	mov	r0, r3
 800753c:	3730      	adds	r7, #48	; 0x30
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007564:	e031      	b.n	80075ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007566:	2310      	movs	r3, #16
 8007568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800756a:	2310      	movs	r3, #16
 800756c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	0e5b      	lsrs	r3, r3, #25
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	0f5b      	lsrs	r3, r3, #29
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	7b3a      	ldrb	r2, [r7, #12]
 8007592:	4911      	ldr	r1, [pc, #68]	; (80075d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007594:	5c8a      	ldrb	r2, [r1, r2]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800759a:	7b3a      	ldrb	r2, [r7, #12]
 800759c:	490f      	ldr	r1, [pc, #60]	; (80075dc <UARTEx_SetNbDataToProcess+0x98>)
 800759e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	7b7a      	ldrb	r2, [r7, #13]
 80075b0:	4909      	ldr	r1, [pc, #36]	; (80075d8 <UARTEx_SetNbDataToProcess+0x94>)
 80075b2:	5c8a      	ldrb	r2, [r1, r2]
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075b8:	7b7a      	ldrb	r2, [r7, #13]
 80075ba:	4908      	ldr	r1, [pc, #32]	; (80075dc <UARTEx_SetNbDataToProcess+0x98>)
 80075bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075be:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	08008138 	.word	0x08008138
 80075dc:	08008140 	.word	0x08008140

080075e0 <siprintf>:
 80075e0:	b40e      	push	{r1, r2, r3}
 80075e2:	b500      	push	{lr}
 80075e4:	b09c      	sub	sp, #112	; 0x70
 80075e6:	ab1d      	add	r3, sp, #116	; 0x74
 80075e8:	9002      	str	r0, [sp, #8]
 80075ea:	9006      	str	r0, [sp, #24]
 80075ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075f0:	4809      	ldr	r0, [pc, #36]	; (8007618 <siprintf+0x38>)
 80075f2:	9107      	str	r1, [sp, #28]
 80075f4:	9104      	str	r1, [sp, #16]
 80075f6:	4909      	ldr	r1, [pc, #36]	; (800761c <siprintf+0x3c>)
 80075f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fc:	9105      	str	r1, [sp, #20]
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	a902      	add	r1, sp, #8
 8007604:	f000 f9a8 	bl	8007958 <_svfiprintf_r>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	b01c      	add	sp, #112	; 0x70
 8007610:	f85d eb04 	ldr.w	lr, [sp], #4
 8007614:	b003      	add	sp, #12
 8007616:	4770      	bx	lr
 8007618:	2400005c 	.word	0x2400005c
 800761c:	ffff0208 	.word	0xffff0208

08007620 <memset>:
 8007620:	4402      	add	r2, r0
 8007622:	4603      	mov	r3, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <strstr>:
 8007630:	780a      	ldrb	r2, [r1, #0]
 8007632:	b570      	push	{r4, r5, r6, lr}
 8007634:	b96a      	cbnz	r2, 8007652 <strstr+0x22>
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	429a      	cmp	r2, r3
 800763a:	d109      	bne.n	8007650 <strstr+0x20>
 800763c:	460c      	mov	r4, r1
 800763e:	4605      	mov	r5, r0
 8007640:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f6      	beq.n	8007636 <strstr+0x6>
 8007648:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800764c:	429e      	cmp	r6, r3
 800764e:	d0f7      	beq.n	8007640 <strstr+0x10>
 8007650:	3001      	adds	r0, #1
 8007652:	7803      	ldrb	r3, [r0, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1ef      	bne.n	8007638 <strstr+0x8>
 8007658:	4618      	mov	r0, r3
 800765a:	e7ec      	b.n	8007636 <strstr+0x6>

0800765c <__errno>:
 800765c:	4b01      	ldr	r3, [pc, #4]	; (8007664 <__errno+0x8>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	2400005c 	.word	0x2400005c

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4d0d      	ldr	r5, [pc, #52]	; (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	; (80076a4 <__libc_init_array+0x3c>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2600      	movs	r6, #0
 8007674:	42a6      	cmp	r6, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4d0b      	ldr	r5, [pc, #44]	; (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	; (80076ac <__libc_init_array+0x44>)
 800767c:	f000 fc6a 	bl	8007f54 <_init>
 8007680:	1b64      	subs	r4, r4, r5
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2600      	movs	r6, #0
 8007686:	42a6      	cmp	r6, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007690:	4798      	blx	r3
 8007692:	3601      	adds	r6, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f855 3b04 	ldr.w	r3, [r5], #4
 800769a:	4798      	blx	r3
 800769c:	3601      	adds	r6, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	08008184 	.word	0x08008184
 80076a4:	08008184 	.word	0x08008184
 80076a8:	08008184 	.word	0x08008184
 80076ac:	08008188 	.word	0x08008188

080076b0 <__retarget_lock_acquire_recursive>:
 80076b0:	4770      	bx	lr

080076b2 <__retarget_lock_release_recursive>:
 80076b2:	4770      	bx	lr

080076b4 <_free_r>:
 80076b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076b6:	2900      	cmp	r1, #0
 80076b8:	d044      	beq.n	8007744 <_free_r+0x90>
 80076ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076be:	9001      	str	r0, [sp, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f1a1 0404 	sub.w	r4, r1, #4
 80076c6:	bfb8      	it	lt
 80076c8:	18e4      	addlt	r4, r4, r3
 80076ca:	f000 f8df 	bl	800788c <__malloc_lock>
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <_free_r+0x94>)
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	b933      	cbnz	r3, 80076e4 <_free_r+0x30>
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	6014      	str	r4, [r2, #0]
 80076da:	b003      	add	sp, #12
 80076dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e0:	f000 b8da 	b.w	8007898 <__malloc_unlock>
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	d908      	bls.n	80076fa <_free_r+0x46>
 80076e8:	6825      	ldr	r5, [r4, #0]
 80076ea:	1961      	adds	r1, r4, r5
 80076ec:	428b      	cmp	r3, r1
 80076ee:	bf01      	itttt	eq
 80076f0:	6819      	ldreq	r1, [r3, #0]
 80076f2:	685b      	ldreq	r3, [r3, #4]
 80076f4:	1949      	addeq	r1, r1, r5
 80076f6:	6021      	streq	r1, [r4, #0]
 80076f8:	e7ed      	b.n	80076d6 <_free_r+0x22>
 80076fa:	461a      	mov	r2, r3
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b10b      	cbz	r3, 8007704 <_free_r+0x50>
 8007700:	42a3      	cmp	r3, r4
 8007702:	d9fa      	bls.n	80076fa <_free_r+0x46>
 8007704:	6811      	ldr	r1, [r2, #0]
 8007706:	1855      	adds	r5, r2, r1
 8007708:	42a5      	cmp	r5, r4
 800770a:	d10b      	bne.n	8007724 <_free_r+0x70>
 800770c:	6824      	ldr	r4, [r4, #0]
 800770e:	4421      	add	r1, r4
 8007710:	1854      	adds	r4, r2, r1
 8007712:	42a3      	cmp	r3, r4
 8007714:	6011      	str	r1, [r2, #0]
 8007716:	d1e0      	bne.n	80076da <_free_r+0x26>
 8007718:	681c      	ldr	r4, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	6053      	str	r3, [r2, #4]
 800771e:	440c      	add	r4, r1
 8007720:	6014      	str	r4, [r2, #0]
 8007722:	e7da      	b.n	80076da <_free_r+0x26>
 8007724:	d902      	bls.n	800772c <_free_r+0x78>
 8007726:	230c      	movs	r3, #12
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	e7d6      	b.n	80076da <_free_r+0x26>
 800772c:	6825      	ldr	r5, [r4, #0]
 800772e:	1961      	adds	r1, r4, r5
 8007730:	428b      	cmp	r3, r1
 8007732:	bf04      	itt	eq
 8007734:	6819      	ldreq	r1, [r3, #0]
 8007736:	685b      	ldreq	r3, [r3, #4]
 8007738:	6063      	str	r3, [r4, #4]
 800773a:	bf04      	itt	eq
 800773c:	1949      	addeq	r1, r1, r5
 800773e:	6021      	streq	r1, [r4, #0]
 8007740:	6054      	str	r4, [r2, #4]
 8007742:	e7ca      	b.n	80076da <_free_r+0x26>
 8007744:	b003      	add	sp, #12
 8007746:	bd30      	pop	{r4, r5, pc}
 8007748:	24002100 	.word	0x24002100

0800774c <sbrk_aligned>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4e0e      	ldr	r6, [pc, #56]	; (8007788 <sbrk_aligned+0x3c>)
 8007750:	460c      	mov	r4, r1
 8007752:	6831      	ldr	r1, [r6, #0]
 8007754:	4605      	mov	r5, r0
 8007756:	b911      	cbnz	r1, 800775e <sbrk_aligned+0x12>
 8007758:	f000 fba6 	bl	8007ea8 <_sbrk_r>
 800775c:	6030      	str	r0, [r6, #0]
 800775e:	4621      	mov	r1, r4
 8007760:	4628      	mov	r0, r5
 8007762:	f000 fba1 	bl	8007ea8 <_sbrk_r>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d00a      	beq.n	8007780 <sbrk_aligned+0x34>
 800776a:	1cc4      	adds	r4, r0, #3
 800776c:	f024 0403 	bic.w	r4, r4, #3
 8007770:	42a0      	cmp	r0, r4
 8007772:	d007      	beq.n	8007784 <sbrk_aligned+0x38>
 8007774:	1a21      	subs	r1, r4, r0
 8007776:	4628      	mov	r0, r5
 8007778:	f000 fb96 	bl	8007ea8 <_sbrk_r>
 800777c:	3001      	adds	r0, #1
 800777e:	d101      	bne.n	8007784 <sbrk_aligned+0x38>
 8007780:	f04f 34ff 	mov.w	r4, #4294967295
 8007784:	4620      	mov	r0, r4
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	24002104 	.word	0x24002104

0800778c <_malloc_r>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	1ccd      	adds	r5, r1, #3
 8007792:	f025 0503 	bic.w	r5, r5, #3
 8007796:	3508      	adds	r5, #8
 8007798:	2d0c      	cmp	r5, #12
 800779a:	bf38      	it	cc
 800779c:	250c      	movcc	r5, #12
 800779e:	2d00      	cmp	r5, #0
 80077a0:	4607      	mov	r7, r0
 80077a2:	db01      	blt.n	80077a8 <_malloc_r+0x1c>
 80077a4:	42a9      	cmp	r1, r5
 80077a6:	d905      	bls.n	80077b4 <_malloc_r+0x28>
 80077a8:	230c      	movs	r3, #12
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	2600      	movs	r6, #0
 80077ae:	4630      	mov	r0, r6
 80077b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007888 <_malloc_r+0xfc>
 80077b8:	f000 f868 	bl	800788c <__malloc_lock>
 80077bc:	f8d8 3000 	ldr.w	r3, [r8]
 80077c0:	461c      	mov	r4, r3
 80077c2:	bb5c      	cbnz	r4, 800781c <_malloc_r+0x90>
 80077c4:	4629      	mov	r1, r5
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7ff ffc0 	bl	800774c <sbrk_aligned>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	4604      	mov	r4, r0
 80077d0:	d155      	bne.n	800787e <_malloc_r+0xf2>
 80077d2:	f8d8 4000 	ldr.w	r4, [r8]
 80077d6:	4626      	mov	r6, r4
 80077d8:	2e00      	cmp	r6, #0
 80077da:	d145      	bne.n	8007868 <_malloc_r+0xdc>
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d048      	beq.n	8007872 <_malloc_r+0xe6>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	4631      	mov	r1, r6
 80077e4:	4638      	mov	r0, r7
 80077e6:	eb04 0903 	add.w	r9, r4, r3
 80077ea:	f000 fb5d 	bl	8007ea8 <_sbrk_r>
 80077ee:	4581      	cmp	r9, r0
 80077f0:	d13f      	bne.n	8007872 <_malloc_r+0xe6>
 80077f2:	6821      	ldr	r1, [r4, #0]
 80077f4:	1a6d      	subs	r5, r5, r1
 80077f6:	4629      	mov	r1, r5
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ffa7 	bl	800774c <sbrk_aligned>
 80077fe:	3001      	adds	r0, #1
 8007800:	d037      	beq.n	8007872 <_malloc_r+0xe6>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	442b      	add	r3, r5
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	f8d8 3000 	ldr.w	r3, [r8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d038      	beq.n	8007882 <_malloc_r+0xf6>
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	42a2      	cmp	r2, r4
 8007814:	d12b      	bne.n	800786e <_malloc_r+0xe2>
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	e00f      	b.n	800783c <_malloc_r+0xb0>
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	1b52      	subs	r2, r2, r5
 8007820:	d41f      	bmi.n	8007862 <_malloc_r+0xd6>
 8007822:	2a0b      	cmp	r2, #11
 8007824:	d917      	bls.n	8007856 <_malloc_r+0xca>
 8007826:	1961      	adds	r1, r4, r5
 8007828:	42a3      	cmp	r3, r4
 800782a:	6025      	str	r5, [r4, #0]
 800782c:	bf18      	it	ne
 800782e:	6059      	strne	r1, [r3, #4]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	bf08      	it	eq
 8007834:	f8c8 1000 	streq.w	r1, [r8]
 8007838:	5162      	str	r2, [r4, r5]
 800783a:	604b      	str	r3, [r1, #4]
 800783c:	4638      	mov	r0, r7
 800783e:	f104 060b 	add.w	r6, r4, #11
 8007842:	f000 f829 	bl	8007898 <__malloc_unlock>
 8007846:	f026 0607 	bic.w	r6, r6, #7
 800784a:	1d23      	adds	r3, r4, #4
 800784c:	1af2      	subs	r2, r6, r3
 800784e:	d0ae      	beq.n	80077ae <_malloc_r+0x22>
 8007850:	1b9b      	subs	r3, r3, r6
 8007852:	50a3      	str	r3, [r4, r2]
 8007854:	e7ab      	b.n	80077ae <_malloc_r+0x22>
 8007856:	42a3      	cmp	r3, r4
 8007858:	6862      	ldr	r2, [r4, #4]
 800785a:	d1dd      	bne.n	8007818 <_malloc_r+0x8c>
 800785c:	f8c8 2000 	str.w	r2, [r8]
 8007860:	e7ec      	b.n	800783c <_malloc_r+0xb0>
 8007862:	4623      	mov	r3, r4
 8007864:	6864      	ldr	r4, [r4, #4]
 8007866:	e7ac      	b.n	80077c2 <_malloc_r+0x36>
 8007868:	4634      	mov	r4, r6
 800786a:	6876      	ldr	r6, [r6, #4]
 800786c:	e7b4      	b.n	80077d8 <_malloc_r+0x4c>
 800786e:	4613      	mov	r3, r2
 8007870:	e7cc      	b.n	800780c <_malloc_r+0x80>
 8007872:	230c      	movs	r3, #12
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4638      	mov	r0, r7
 8007878:	f000 f80e 	bl	8007898 <__malloc_unlock>
 800787c:	e797      	b.n	80077ae <_malloc_r+0x22>
 800787e:	6025      	str	r5, [r4, #0]
 8007880:	e7dc      	b.n	800783c <_malloc_r+0xb0>
 8007882:	605b      	str	r3, [r3, #4]
 8007884:	deff      	udf	#255	; 0xff
 8007886:	bf00      	nop
 8007888:	24002100 	.word	0x24002100

0800788c <__malloc_lock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_lock+0x8>)
 800788e:	f7ff bf0f 	b.w	80076b0 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	240020fc 	.word	0x240020fc

08007898 <__malloc_unlock>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__malloc_unlock+0x8>)
 800789a:	f7ff bf0a 	b.w	80076b2 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	240020fc 	.word	0x240020fc

080078a4 <__ssputs_r>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	688e      	ldr	r6, [r1, #8]
 80078aa:	461f      	mov	r7, r3
 80078ac:	42be      	cmp	r6, r7
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	d82c      	bhi.n	8007912 <__ssputs_r+0x6e>
 80078b8:	898a      	ldrh	r2, [r1, #12]
 80078ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078be:	d026      	beq.n	800790e <__ssputs_r+0x6a>
 80078c0:	6965      	ldr	r5, [r4, #20]
 80078c2:	6909      	ldr	r1, [r1, #16]
 80078c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c8:	eba3 0901 	sub.w	r9, r3, r1
 80078cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d0:	1c7b      	adds	r3, r7, #1
 80078d2:	444b      	add	r3, r9
 80078d4:	106d      	asrs	r5, r5, #1
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf38      	it	cc
 80078da:	461d      	movcc	r5, r3
 80078dc:	0553      	lsls	r3, r2, #21
 80078de:	d527      	bpl.n	8007930 <__ssputs_r+0x8c>
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7ff ff53 	bl	800778c <_malloc_r>
 80078e6:	4606      	mov	r6, r0
 80078e8:	b360      	cbz	r0, 8007944 <__ssputs_r+0xa0>
 80078ea:	6921      	ldr	r1, [r4, #16]
 80078ec:	464a      	mov	r2, r9
 80078ee:	f000 faeb 	bl	8007ec8 <memcpy>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	6126      	str	r6, [r4, #16]
 8007900:	6165      	str	r5, [r4, #20]
 8007902:	444e      	add	r6, r9
 8007904:	eba5 0509 	sub.w	r5, r5, r9
 8007908:	6026      	str	r6, [r4, #0]
 800790a:	60a5      	str	r5, [r4, #8]
 800790c:	463e      	mov	r6, r7
 800790e:	42be      	cmp	r6, r7
 8007910:	d900      	bls.n	8007914 <__ssputs_r+0x70>
 8007912:	463e      	mov	r6, r7
 8007914:	6820      	ldr	r0, [r4, #0]
 8007916:	4632      	mov	r2, r6
 8007918:	4641      	mov	r1, r8
 800791a:	f000 faab 	bl	8007e74 <memmove>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	1b9b      	subs	r3, r3, r6
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	4433      	add	r3, r6
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	2000      	movs	r0, #0
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	462a      	mov	r2, r5
 8007932:	f000 fad7 	bl	8007ee4 <_realloc_r>
 8007936:	4606      	mov	r6, r0
 8007938:	2800      	cmp	r0, #0
 800793a:	d1e0      	bne.n	80078fe <__ssputs_r+0x5a>
 800793c:	6921      	ldr	r1, [r4, #16]
 800793e:	4650      	mov	r0, sl
 8007940:	f7ff feb8 	bl	80076b4 <_free_r>
 8007944:	230c      	movs	r3, #12
 8007946:	f8ca 3000 	str.w	r3, [sl]
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	f04f 30ff 	mov.w	r0, #4294967295
 8007956:	e7e9      	b.n	800792c <__ssputs_r+0x88>

08007958 <_svfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4698      	mov	r8, r3
 800795e:	898b      	ldrh	r3, [r1, #12]
 8007960:	061b      	lsls	r3, r3, #24
 8007962:	b09d      	sub	sp, #116	; 0x74
 8007964:	4607      	mov	r7, r0
 8007966:	460d      	mov	r5, r1
 8007968:	4614      	mov	r4, r2
 800796a:	d50e      	bpl.n	800798a <_svfiprintf_r+0x32>
 800796c:	690b      	ldr	r3, [r1, #16]
 800796e:	b963      	cbnz	r3, 800798a <_svfiprintf_r+0x32>
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	f7ff ff0b 	bl	800778c <_malloc_r>
 8007976:	6028      	str	r0, [r5, #0]
 8007978:	6128      	str	r0, [r5, #16]
 800797a:	b920      	cbnz	r0, 8007986 <_svfiprintf_r+0x2e>
 800797c:	230c      	movs	r3, #12
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e0d0      	b.n	8007b28 <_svfiprintf_r+0x1d0>
 8007986:	2340      	movs	r3, #64	; 0x40
 8007988:	616b      	str	r3, [r5, #20]
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	2320      	movs	r3, #32
 8007990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007994:	f8cd 800c 	str.w	r8, [sp, #12]
 8007998:	2330      	movs	r3, #48	; 0x30
 800799a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b40 <_svfiprintf_r+0x1e8>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a2:	f04f 0901 	mov.w	r9, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	469a      	mov	sl, r3
 80079aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ae:	b10a      	cbz	r2, 80079b4 <_svfiprintf_r+0x5c>
 80079b0:	2a25      	cmp	r2, #37	; 0x25
 80079b2:	d1f9      	bne.n	80079a8 <_svfiprintf_r+0x50>
 80079b4:	ebba 0b04 	subs.w	fp, sl, r4
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x7a>
 80079ba:	465b      	mov	r3, fp
 80079bc:	4622      	mov	r2, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ff6f 	bl	80078a4 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a9 	beq.w	8007b1e <_svfiprintf_r+0x1c6>
 80079cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ce:	445a      	add	r2, fp
 80079d0:	9209      	str	r2, [sp, #36]	; 0x24
 80079d2:	f89a 3000 	ldrb.w	r3, [sl]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80a1 	beq.w	8007b1e <_svfiprintf_r+0x1c6>
 80079dc:	2300      	movs	r3, #0
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f2:	931a      	str	r3, [sp, #104]	; 0x68
 80079f4:	4654      	mov	r4, sl
 80079f6:	2205      	movs	r2, #5
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	4850      	ldr	r0, [pc, #320]	; (8007b40 <_svfiprintf_r+0x1e8>)
 80079fe:	f7f8 fc77 	bl	80002f0 <memchr>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	b9d8      	cbnz	r0, 8007a3e <_svfiprintf_r+0xe6>
 8007a06:	06d0      	lsls	r0, r2, #27
 8007a08:	bf44      	itt	mi
 8007a0a:	2320      	movmi	r3, #32
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a10:	0711      	lsls	r1, r2, #28
 8007a12:	bf44      	itt	mi
 8007a14:	232b      	movmi	r3, #43	; 0x2b
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a20:	d015      	beq.n	8007a4e <_svfiprintf_r+0xf6>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	4654      	mov	r4, sl
 8007a26:	2000      	movs	r0, #0
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a32:	3b30      	subs	r3, #48	; 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d94d      	bls.n	8007ad4 <_svfiprintf_r+0x17c>
 8007a38:	b1b0      	cbz	r0, 8007a68 <_svfiprintf_r+0x110>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e014      	b.n	8007a68 <_svfiprintf_r+0x110>
 8007a3e:	eba0 0308 	sub.w	r3, r0, r8
 8007a42:	fa09 f303 	lsl.w	r3, r9, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	e7d2      	b.n	80079f4 <_svfiprintf_r+0x9c>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbb      	ittet	lt
 8007a5a:	425b      	neglt	r3, r3
 8007a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a60:	9307      	strge	r3, [sp, #28]
 8007a62:	9307      	strlt	r3, [sp, #28]
 8007a64:	bfb8      	it	lt
 8007a66:	9204      	strlt	r2, [sp, #16]
 8007a68:	7823      	ldrb	r3, [r4, #0]
 8007a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6c:	d10c      	bne.n	8007a88 <_svfiprintf_r+0x130>
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	2b2a      	cmp	r3, #42	; 0x2a
 8007a72:	d134      	bne.n	8007ade <_svfiprintf_r+0x186>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfb8      	it	lt
 8007a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a84:	3402      	adds	r4, #2
 8007a86:	9305      	str	r3, [sp, #20]
 8007a88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b50 <_svfiprintf_r+0x1f8>
 8007a8c:	7821      	ldrb	r1, [r4, #0]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	4650      	mov	r0, sl
 8007a92:	f7f8 fc2d 	bl	80002f0 <memchr>
 8007a96:	b138      	cbz	r0, 8007aa8 <_svfiprintf_r+0x150>
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	eba0 000a 	sub.w	r0, r0, sl
 8007a9e:	2240      	movs	r2, #64	; 0x40
 8007aa0:	4082      	lsls	r2, r0
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	3401      	adds	r4, #1
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	4825      	ldr	r0, [pc, #148]	; (8007b44 <_svfiprintf_r+0x1ec>)
 8007aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab2:	2206      	movs	r2, #6
 8007ab4:	f7f8 fc1c 	bl	80002f0 <memchr>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d038      	beq.n	8007b2e <_svfiprintf_r+0x1d6>
 8007abc:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <_svfiprintf_r+0x1f0>)
 8007abe:	bb1b      	cbnz	r3, 8007b08 <_svfiprintf_r+0x1b0>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	3307      	adds	r3, #7
 8007ac4:	f023 0307 	bic.w	r3, r3, #7
 8007ac8:	3308      	adds	r3, #8
 8007aca:	9303      	str	r3, [sp, #12]
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	4433      	add	r3, r6
 8007ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad2:	e768      	b.n	80079a6 <_svfiprintf_r+0x4e>
 8007ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad8:	460c      	mov	r4, r1
 8007ada:	2001      	movs	r0, #1
 8007adc:	e7a6      	b.n	8007a2c <_svfiprintf_r+0xd4>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	3401      	adds	r4, #1
 8007ae2:	9305      	str	r3, [sp, #20]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	f04f 0c0a 	mov.w	ip, #10
 8007aea:	4620      	mov	r0, r4
 8007aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af0:	3a30      	subs	r2, #48	; 0x30
 8007af2:	2a09      	cmp	r2, #9
 8007af4:	d903      	bls.n	8007afe <_svfiprintf_r+0x1a6>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0c6      	beq.n	8007a88 <_svfiprintf_r+0x130>
 8007afa:	9105      	str	r1, [sp, #20]
 8007afc:	e7c4      	b.n	8007a88 <_svfiprintf_r+0x130>
 8007afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b02:	4604      	mov	r4, r0
 8007b04:	2301      	movs	r3, #1
 8007b06:	e7f0      	b.n	8007aea <_svfiprintf_r+0x192>
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <_svfiprintf_r+0x1f4>)
 8007b10:	a904      	add	r1, sp, #16
 8007b12:	4638      	mov	r0, r7
 8007b14:	f3af 8000 	nop.w
 8007b18:	1c42      	adds	r2, r0, #1
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	d1d6      	bne.n	8007acc <_svfiprintf_r+0x174>
 8007b1e:	89ab      	ldrh	r3, [r5, #12]
 8007b20:	065b      	lsls	r3, r3, #25
 8007b22:	f53f af2d 	bmi.w	8007980 <_svfiprintf_r+0x28>
 8007b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b28:	b01d      	add	sp, #116	; 0x74
 8007b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <_svfiprintf_r+0x1f4>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f000 f879 	bl	8007c30 <_printf_i>
 8007b3e:	e7eb      	b.n	8007b18 <_svfiprintf_r+0x1c0>
 8007b40:	08008148 	.word	0x08008148
 8007b44:	08008152 	.word	0x08008152
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	080078a5 	.word	0x080078a5
 8007b50:	0800814e 	.word	0x0800814e

08007b54 <_printf_common>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	4616      	mov	r6, r2
 8007b5a:	4699      	mov	r9, r3
 8007b5c:	688a      	ldr	r2, [r1, #8]
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	bfb8      	it	lt
 8007b68:	4613      	movlt	r3, r2
 8007b6a:	6033      	str	r3, [r6, #0]
 8007b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b70:	4607      	mov	r7, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b10a      	cbz	r2, 8007b7a <_printf_common+0x26>
 8007b76:	3301      	adds	r3, #1
 8007b78:	6033      	str	r3, [r6, #0]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	0699      	lsls	r1, r3, #26
 8007b7e:	bf42      	ittt	mi
 8007b80:	6833      	ldrmi	r3, [r6, #0]
 8007b82:	3302      	addmi	r3, #2
 8007b84:	6033      	strmi	r3, [r6, #0]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	f015 0506 	ands.w	r5, r5, #6
 8007b8c:	d106      	bne.n	8007b9c <_printf_common+0x48>
 8007b8e:	f104 0a19 	add.w	sl, r4, #25
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	6832      	ldr	r2, [r6, #0]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dc26      	bgt.n	8007bea <_printf_common+0x96>
 8007b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba0:	1e13      	subs	r3, r2, #0
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	bf18      	it	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	0692      	lsls	r2, r2, #26
 8007baa:	d42b      	bmi.n	8007c04 <_printf_common+0xb0>
 8007bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c0      	blx	r8
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d01e      	beq.n	8007bf8 <_printf_common+0xa4>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	f003 0306 	and.w	r3, r3, #6
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	bf02      	ittt	eq
 8007bc6:	68e5      	ldreq	r5, [r4, #12]
 8007bc8:	6833      	ldreq	r3, [r6, #0]
 8007bca:	1aed      	subeq	r5, r5, r3
 8007bcc:	68a3      	ldr	r3, [r4, #8]
 8007bce:	bf0c      	ite	eq
 8007bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd4:	2500      	movne	r5, #0
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bfc4      	itt	gt
 8007bda:	1a9b      	subgt	r3, r3, r2
 8007bdc:	18ed      	addgt	r5, r5, r3
 8007bde:	2600      	movs	r6, #0
 8007be0:	341a      	adds	r4, #26
 8007be2:	42b5      	cmp	r5, r6
 8007be4:	d11a      	bne.n	8007c1c <_printf_common+0xc8>
 8007be6:	2000      	movs	r0, #0
 8007be8:	e008      	b.n	8007bfc <_printf_common+0xa8>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4652      	mov	r2, sl
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	47c0      	blx	r8
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d103      	bne.n	8007c00 <_printf_common+0xac>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	3501      	adds	r5, #1
 8007c02:	e7c6      	b.n	8007b92 <_printf_common+0x3e>
 8007c04:	18e1      	adds	r1, r4, r3
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	2030      	movs	r0, #48	; 0x30
 8007c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c0e:	4422      	add	r2, r4
 8007c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c18:	3302      	adds	r3, #2
 8007c1a:	e7c7      	b.n	8007bac <_printf_common+0x58>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4649      	mov	r1, r9
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c0      	blx	r8
 8007c26:	3001      	adds	r0, #1
 8007c28:	d0e6      	beq.n	8007bf8 <_printf_common+0xa4>
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7d9      	b.n	8007be2 <_printf_common+0x8e>
	...

08007c30 <_printf_i>:
 8007c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	7e0f      	ldrb	r7, [r1, #24]
 8007c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c38:	2f78      	cmp	r7, #120	; 0x78
 8007c3a:	4691      	mov	r9, r2
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	469a      	mov	sl, r3
 8007c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c46:	d807      	bhi.n	8007c58 <_printf_i+0x28>
 8007c48:	2f62      	cmp	r7, #98	; 0x62
 8007c4a:	d80a      	bhi.n	8007c62 <_printf_i+0x32>
 8007c4c:	2f00      	cmp	r7, #0
 8007c4e:	f000 80d4 	beq.w	8007dfa <_printf_i+0x1ca>
 8007c52:	2f58      	cmp	r7, #88	; 0x58
 8007c54:	f000 80c0 	beq.w	8007dd8 <_printf_i+0x1a8>
 8007c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c60:	e03a      	b.n	8007cd8 <_printf_i+0xa8>
 8007c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c66:	2b15      	cmp	r3, #21
 8007c68:	d8f6      	bhi.n	8007c58 <_printf_i+0x28>
 8007c6a:	a101      	add	r1, pc, #4	; (adr r1, 8007c70 <_printf_i+0x40>)
 8007c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c70:	08007cc9 	.word	0x08007cc9
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007c59 	.word	0x08007c59
 8007c7c:	08007c59 	.word	0x08007c59
 8007c80:	08007c59 	.word	0x08007c59
 8007c84:	08007c59 	.word	0x08007c59
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007c59 	.word	0x08007c59
 8007c90:	08007c59 	.word	0x08007c59
 8007c94:	08007c59 	.word	0x08007c59
 8007c98:	08007c59 	.word	0x08007c59
 8007c9c:	08007de1 	.word	0x08007de1
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d9b 	.word	0x08007d9b
 8007ca8:	08007c59 	.word	0x08007c59
 8007cac:	08007c59 	.word	0x08007c59
 8007cb0:	08007e03 	.word	0x08007e03
 8007cb4:	08007c59 	.word	0x08007c59
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007c59 	.word	0x08007c59
 8007cc0:	08007c59 	.word	0x08007c59
 8007cc4:	08007da3 	.word	0x08007da3
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	602a      	str	r2, [r5, #0]
 8007cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e09f      	b.n	8007e1c <_printf_i+0x1ec>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	0607      	lsls	r7, r0, #24
 8007ce2:	f103 0104 	add.w	r1, r3, #4
 8007ce6:	6029      	str	r1, [r5, #0]
 8007ce8:	d501      	bpl.n	8007cee <_printf_i+0xbe>
 8007cea:	681e      	ldr	r6, [r3, #0]
 8007cec:	e003      	b.n	8007cf6 <_printf_i+0xc6>
 8007cee:	0646      	lsls	r6, r0, #25
 8007cf0:	d5fb      	bpl.n	8007cea <_printf_i+0xba>
 8007cf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	da03      	bge.n	8007d02 <_printf_i+0xd2>
 8007cfa:	232d      	movs	r3, #45	; 0x2d
 8007cfc:	4276      	negs	r6, r6
 8007cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d02:	485a      	ldr	r0, [pc, #360]	; (8007e6c <_printf_i+0x23c>)
 8007d04:	230a      	movs	r3, #10
 8007d06:	e012      	b.n	8007d2e <_printf_i+0xfe>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	6820      	ldr	r0, [r4, #0]
 8007d0c:	1d19      	adds	r1, r3, #4
 8007d0e:	6029      	str	r1, [r5, #0]
 8007d10:	0605      	lsls	r5, r0, #24
 8007d12:	d501      	bpl.n	8007d18 <_printf_i+0xe8>
 8007d14:	681e      	ldr	r6, [r3, #0]
 8007d16:	e002      	b.n	8007d1e <_printf_i+0xee>
 8007d18:	0641      	lsls	r1, r0, #25
 8007d1a:	d5fb      	bpl.n	8007d14 <_printf_i+0xe4>
 8007d1c:	881e      	ldrh	r6, [r3, #0]
 8007d1e:	4853      	ldr	r0, [pc, #332]	; (8007e6c <_printf_i+0x23c>)
 8007d20:	2f6f      	cmp	r7, #111	; 0x6f
 8007d22:	bf0c      	ite	eq
 8007d24:	2308      	moveq	r3, #8
 8007d26:	230a      	movne	r3, #10
 8007d28:	2100      	movs	r1, #0
 8007d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d2e:	6865      	ldr	r5, [r4, #4]
 8007d30:	60a5      	str	r5, [r4, #8]
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	bfa2      	ittt	ge
 8007d36:	6821      	ldrge	r1, [r4, #0]
 8007d38:	f021 0104 	bicge.w	r1, r1, #4
 8007d3c:	6021      	strge	r1, [r4, #0]
 8007d3e:	b90e      	cbnz	r6, 8007d44 <_printf_i+0x114>
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	d04b      	beq.n	8007ddc <_printf_i+0x1ac>
 8007d44:	4615      	mov	r5, r2
 8007d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d4e:	5dc7      	ldrb	r7, [r0, r7]
 8007d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d54:	4637      	mov	r7, r6
 8007d56:	42bb      	cmp	r3, r7
 8007d58:	460e      	mov	r6, r1
 8007d5a:	d9f4      	bls.n	8007d46 <_printf_i+0x116>
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d10b      	bne.n	8007d78 <_printf_i+0x148>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	07de      	lsls	r6, r3, #31
 8007d64:	d508      	bpl.n	8007d78 <_printf_i+0x148>
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	6861      	ldr	r1, [r4, #4]
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	bfde      	ittt	le
 8007d6e:	2330      	movle	r3, #48	; 0x30
 8007d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d78:	1b52      	subs	r2, r2, r5
 8007d7a:	6122      	str	r2, [r4, #16]
 8007d7c:	f8cd a000 	str.w	sl, [sp]
 8007d80:	464b      	mov	r3, r9
 8007d82:	aa03      	add	r2, sp, #12
 8007d84:	4621      	mov	r1, r4
 8007d86:	4640      	mov	r0, r8
 8007d88:	f7ff fee4 	bl	8007b54 <_printf_common>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d14a      	bne.n	8007e26 <_printf_i+0x1f6>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	b004      	add	sp, #16
 8007d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	f043 0320 	orr.w	r3, r3, #32
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	4833      	ldr	r0, [pc, #204]	; (8007e70 <_printf_i+0x240>)
 8007da4:	2778      	movs	r7, #120	; 0x78
 8007da6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	6829      	ldr	r1, [r5, #0]
 8007dae:	061f      	lsls	r7, r3, #24
 8007db0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db4:	d402      	bmi.n	8007dbc <_printf_i+0x18c>
 8007db6:	065f      	lsls	r7, r3, #25
 8007db8:	bf48      	it	mi
 8007dba:	b2b6      	uxthmi	r6, r6
 8007dbc:	07df      	lsls	r7, r3, #31
 8007dbe:	bf48      	it	mi
 8007dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc4:	6029      	str	r1, [r5, #0]
 8007dc6:	bf48      	it	mi
 8007dc8:	6023      	strmi	r3, [r4, #0]
 8007dca:	b91e      	cbnz	r6, 8007dd4 <_printf_i+0x1a4>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	f023 0320 	bic.w	r3, r3, #32
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	e7a7      	b.n	8007d28 <_printf_i+0xf8>
 8007dd8:	4824      	ldr	r0, [pc, #144]	; (8007e6c <_printf_i+0x23c>)
 8007dda:	e7e4      	b.n	8007da6 <_printf_i+0x176>
 8007ddc:	4615      	mov	r5, r2
 8007dde:	e7bd      	b.n	8007d5c <_printf_i+0x12c>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	6826      	ldr	r6, [r4, #0]
 8007de4:	6961      	ldr	r1, [r4, #20]
 8007de6:	1d18      	adds	r0, r3, #4
 8007de8:	6028      	str	r0, [r5, #0]
 8007dea:	0635      	lsls	r5, r6, #24
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	d501      	bpl.n	8007df4 <_printf_i+0x1c4>
 8007df0:	6019      	str	r1, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <_printf_i+0x1ca>
 8007df4:	0670      	lsls	r0, r6, #25
 8007df6:	d5fb      	bpl.n	8007df0 <_printf_i+0x1c0>
 8007df8:	8019      	strh	r1, [r3, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	4615      	mov	r5, r2
 8007e00:	e7bc      	b.n	8007d7c <_printf_i+0x14c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	602a      	str	r2, [r5, #0]
 8007e08:	681d      	ldr	r5, [r3, #0]
 8007e0a:	6862      	ldr	r2, [r4, #4]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7f8 fa6e 	bl	80002f0 <memchr>
 8007e14:	b108      	cbz	r0, 8007e1a <_printf_i+0x1ea>
 8007e16:	1b40      	subs	r0, r0, r5
 8007e18:	6060      	str	r0, [r4, #4]
 8007e1a:	6863      	ldr	r3, [r4, #4]
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e24:	e7aa      	b.n	8007d7c <_printf_i+0x14c>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	47d0      	blx	sl
 8007e30:	3001      	adds	r0, #1
 8007e32:	d0ad      	beq.n	8007d90 <_printf_i+0x160>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	079b      	lsls	r3, r3, #30
 8007e38:	d413      	bmi.n	8007e62 <_printf_i+0x232>
 8007e3a:	68e0      	ldr	r0, [r4, #12]
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	4298      	cmp	r0, r3
 8007e40:	bfb8      	it	lt
 8007e42:	4618      	movlt	r0, r3
 8007e44:	e7a6      	b.n	8007d94 <_printf_i+0x164>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	47d0      	blx	sl
 8007e50:	3001      	adds	r0, #1
 8007e52:	d09d      	beq.n	8007d90 <_printf_i+0x160>
 8007e54:	3501      	adds	r5, #1
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	9903      	ldr	r1, [sp, #12]
 8007e5a:	1a5b      	subs	r3, r3, r1
 8007e5c:	42ab      	cmp	r3, r5
 8007e5e:	dcf2      	bgt.n	8007e46 <_printf_i+0x216>
 8007e60:	e7eb      	b.n	8007e3a <_printf_i+0x20a>
 8007e62:	2500      	movs	r5, #0
 8007e64:	f104 0619 	add.w	r6, r4, #25
 8007e68:	e7f5      	b.n	8007e56 <_printf_i+0x226>
 8007e6a:	bf00      	nop
 8007e6c:	08008159 	.word	0x08008159
 8007e70:	0800816a 	.word	0x0800816a

08007e74 <memmove>:
 8007e74:	4288      	cmp	r0, r1
 8007e76:	b510      	push	{r4, lr}
 8007e78:	eb01 0402 	add.w	r4, r1, r2
 8007e7c:	d902      	bls.n	8007e84 <memmove+0x10>
 8007e7e:	4284      	cmp	r4, r0
 8007e80:	4623      	mov	r3, r4
 8007e82:	d807      	bhi.n	8007e94 <memmove+0x20>
 8007e84:	1e43      	subs	r3, r0, #1
 8007e86:	42a1      	cmp	r1, r4
 8007e88:	d008      	beq.n	8007e9c <memmove+0x28>
 8007e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e92:	e7f8      	b.n	8007e86 <memmove+0x12>
 8007e94:	4402      	add	r2, r0
 8007e96:	4601      	mov	r1, r0
 8007e98:	428a      	cmp	r2, r1
 8007e9a:	d100      	bne.n	8007e9e <memmove+0x2a>
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ea6:	e7f7      	b.n	8007e98 <memmove+0x24>

08007ea8 <_sbrk_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d06      	ldr	r5, [pc, #24]	; (8007ec4 <_sbrk_r+0x1c>)
 8007eac:	2300      	movs	r3, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	f7f9 fb06 	bl	80014c4 <_sbrk>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_sbrk_r+0x1a>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_sbrk_r+0x1a>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	240020f8 	.word	0x240020f8

08007ec8 <memcpy>:
 8007ec8:	440a      	add	r2, r1
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed0:	d100      	bne.n	8007ed4 <memcpy+0xc>
 8007ed2:	4770      	bx	lr
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ede:	4291      	cmp	r1, r2
 8007ee0:	d1f9      	bne.n	8007ed6 <memcpy+0xe>
 8007ee2:	bd10      	pop	{r4, pc}

08007ee4 <_realloc_r>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4614      	mov	r4, r2
 8007eec:	460e      	mov	r6, r1
 8007eee:	b921      	cbnz	r1, 8007efa <_realloc_r+0x16>
 8007ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	f7ff bc49 	b.w	800778c <_malloc_r>
 8007efa:	b92a      	cbnz	r2, 8007f08 <_realloc_r+0x24>
 8007efc:	f7ff fbda 	bl	80076b4 <_free_r>
 8007f00:	4625      	mov	r5, r4
 8007f02:	4628      	mov	r0, r5
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	f000 f81b 	bl	8007f42 <_malloc_usable_size_r>
 8007f0c:	4284      	cmp	r4, r0
 8007f0e:	4607      	mov	r7, r0
 8007f10:	d802      	bhi.n	8007f18 <_realloc_r+0x34>
 8007f12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f16:	d812      	bhi.n	8007f3e <_realloc_r+0x5a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7ff fc36 	bl	800778c <_malloc_r>
 8007f20:	4605      	mov	r5, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d0ed      	beq.n	8007f02 <_realloc_r+0x1e>
 8007f26:	42bc      	cmp	r4, r7
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	bf28      	it	cs
 8007f2e:	463a      	movcs	r2, r7
 8007f30:	f7ff ffca 	bl	8007ec8 <memcpy>
 8007f34:	4631      	mov	r1, r6
 8007f36:	4640      	mov	r0, r8
 8007f38:	f7ff fbbc 	bl	80076b4 <_free_r>
 8007f3c:	e7e1      	b.n	8007f02 <_realloc_r+0x1e>
 8007f3e:	4635      	mov	r5, r6
 8007f40:	e7df      	b.n	8007f02 <_realloc_r+0x1e>

08007f42 <_malloc_usable_size_r>:
 8007f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f46:	1f18      	subs	r0, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfbc      	itt	lt
 8007f4c:	580b      	ldrlt	r3, [r1, r0]
 8007f4e:	18c0      	addlt	r0, r0, r3
 8007f50:	4770      	bx	lr
	...

08007f54 <_init>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr

08007f60 <_fini>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	bf00      	nop
 8007f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f66:	bc08      	pop	{r3}
 8007f68:	469e      	mov	lr, r3
 8007f6a:	4770      	bx	lr
